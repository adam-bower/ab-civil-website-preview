{"ast":null,"code":"var _jsxFileName = \"/Users/adambower/Dev/new-website-adam/website/src/shared/components/ConfirmationPage/ConfirmationPage.jsx\";\nimport React, { useState } from 'react';\nimport './ConfirmationPage.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ConfirmationPage = ({\n  title = \"Thank You!\",\n  message = \"Your submission has been received.\",\n  submissionData = null,\n  showDetails = false,\n  onNewSubmission = null,\n  customContent = null,\n  referenceNumber = null,\n  estimatedResponseTime = null,\n  uploadedFiles = null\n}) => {\n  var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n  // Debug logging for production\n  console.log('[ConfirmationPage] Props received:', {\n    hasUploadedFiles: !!uploadedFiles,\n    uploadedFilesLength: uploadedFiles ? uploadedFiles.length : 0,\n    uploadedFiles: uploadedFiles\n  });\n  const formatValue = value => {\n    if (value === null || value === undefined || value === '') {\n      return 'N/A';\n    }\n    if (Array.isArray(value)) {\n      // Check if array contains objects (like contacts)\n      if (value.length > 0 && typeof value[0] === 'object') {\n        return 'See details below';\n      }\n      return value.length > 0 ? value.join(', ') : 'None selected';\n    }\n    if (typeof value === 'boolean') {\n      return value ? 'Yes' : 'No';\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value, null, 2);\n    }\n    return String(value);\n  };\n  const formatFieldName = fieldName => {\n    return fieldName.replace(/_/g, ' ').replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()).trim();\n  };\n\n  // Format file size\n  const formatFileSize = bytes => {\n    if (!bytes || bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];\n  };\n\n  // Get file type info based on filename\n  const getFileTypeInfo = filename => {\n    if (!filename) return {\n      label: 'FILE',\n      className: 'file-type-default'\n    };\n    const ext = filename.split('.').pop().toLowerCase();\n    if (['pdf'].includes(ext)) return {\n      label: 'PDF',\n      className: 'file-type-pdf'\n    };\n    if (['jpg', 'jpeg', 'png', 'gif', 'webp', 'bmp'].includes(ext)) return {\n      label: 'IMG',\n      className: 'file-type-image'\n    };\n    if (['zip', 'rar', '7z'].includes(ext)) return {\n      label: 'ZIP',\n      className: 'file-type-archive'\n    };\n    if (['dwg', 'dxf', 'dwf'].includes(ext)) return {\n      label: 'CAD',\n      className: 'file-type-cad'\n    };\n    if (['xls', 'xlsx', 'xlsm'].includes(ext)) return {\n      label: 'XLS',\n      className: 'file-type-excel'\n    };\n    if (['txt', 'csv'].includes(ext)) return {\n      label: 'TXT',\n      className: 'file-type-text'\n    };\n    if (['rvt', 'rfa', 'ifc'].includes(ext)) return {\n      label: 'BIM',\n      className: 'file-type-bim'\n    };\n    return {\n      label: 'FILE',\n      className: 'file-type-default'\n    };\n  };\n\n  // Organize files by folder structure\n  const organizeFilesByFolder = files => {\n    const folderStructure = {};\n    files.forEach(file => {\n      // Get the folder path from the file\n      const folderPath = file.folder || (file.relativePath ? file.relativePath.substring(0, file.relativePath.lastIndexOf('/')) : '');\n\n      // If no folder, put in root\n      const folder = folderPath || 'root';\n      if (!folderStructure[folder]) {\n        folderStructure[folder] = [];\n      }\n      folderStructure[folder].push(file);\n    });\n    return folderStructure;\n  };\n  const UploadedFilesSection = () => {\n    _s();\n    const [isExpanded, setIsExpanded] = useState(false);\n    const [expandedFolders, setExpandedFolders] = useState({});\n    const folderStructure = organizeFilesByFolder(uploadedFiles);\n    const folderNames = Object.keys(folderStructure).sort((a, b) => {\n      if (a === 'root') return -1;\n      if (b === 'root') return 1;\n      return a.localeCompare(b);\n    });\n    const toggleExpanded = () => {\n      setIsExpanded(!isExpanded);\n    };\n    const toggleFolder = folderName => {\n      setExpandedFolders(prev => ({\n        ...prev,\n        [folderName]: !prev[folderName]\n      }));\n    };\n\n    // Count total files\n    const totalFiles = uploadedFiles.length;\n    const totalFolders = folderNames.filter(name => name !== 'root').length;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"confirmation-files-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirmation-files-header clickable\",\n        onClick: toggleExpanded,\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          className: `confirmation-chevron ${isExpanded ? 'expanded' : ''}`,\n          width: \"20\",\n          height: \"20\",\n          viewBox: \"0 0 20 20\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M6 8l4 4 4-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"confirmation-files-title\",\n          children: [\"Uploaded Files\", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"files-summary\",\n            children: [\"(\", totalFiles, \" \", totalFiles === 1 ? 'file' : 'files', totalFolders > 0 ? ` in ${totalFolders} ${totalFolders === 1 ? 'folder' : 'folders'}` : '', \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), isExpanded && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirmation-files-content\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"confirmation-folders-list\",\n          children: folderNames.map(folderName => {\n            const isFolder = folderName !== 'root';\n            const isFolderExpanded = expandedFolders[folderName] !== false;\n            const files = folderStructure[folderName];\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: isFolder ? \"folder-group\" : \"root-files\",\n              children: isFolder ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"folder-header\",\n                  children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n                    className: \"folder-icon\",\n                    width: \"15\",\n                    height: \"15\",\n                    viewBox: \"0 0 16 16\",\n                    fill: \"currentColor\",\n                    children: /*#__PURE__*/_jsxDEV(\"path\", {\n                      d: \"M9.828 3h3.982a2 2 0 0 1 1.992 2.181l-.637 7A2 2 0 0 1 13.174 14H2.826a2 2 0 0 1-1.991-1.819l-.637-7a1.99 1.99 0 0 1 .342-1.31L.5 3a2 2 0 0 1 2-2h3.672a2 2 0 0 1 1.414.586l.828.828A2 2 0 0 0 9.828 3z\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 167,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 160,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"folder-name\",\n                    children: folderName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 169,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"folder-file-count\",\n                    children: [\"(\", files.length, \" files)\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 170,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 25\n                }, this), files.map((file, index) => {\n                  const fileType = getFileTypeInfo(file.filename || file.name);\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"file-item compact\",\n                    style: {\n                      marginLeft: '20px',\n                      borderLeft: '1px dashed #d1d5db'\n                    },\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"file-info\",\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        className: `file-type-badge ${fileType.className}`,\n                        children: fileType.label\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 177,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"file-name\",\n                        children: file.filename || file.name\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 180,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"file-size\",\n                        children: formatFileSize(file.size)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 181,\n                        columnNumber: 33\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 176,\n                      columnNumber: 31\n                    }, this)\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 175,\n                    columnNumber: 29\n                  }, this);\n                })]\n              }, void 0, true) : files.map((file, index) => {\n                const fileType = getFileTypeInfo(file.filename || file.name);\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"file-item compact\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"file-info\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: `file-type-badge ${fileType.className}`,\n                      children: fileType.label\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 193,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"file-name\",\n                      children: file.filename || file.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 196,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"file-size\",\n                      children: formatFileSize(file.size)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 197,\n                      columnNumber: 31\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 192,\n                    columnNumber: 29\n                  }, this)\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 191,\n                  columnNumber: 27\n                }, this);\n              })\n            }, folderName, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this);\n  };\n  _s(UploadedFilesSection, \"LoCfO1hP9AMJE66OfZ5RlbOYcy0=\");\n  const SubmissionDetails = () => {\n    _s2();\n    const [isExpanded, setIsExpanded] = useState(true);\n    const [expandedSections, setExpandedSections] = useState({});\n    React.useEffect(() => {\n      // Initialize all sections as expanded\n      if (submissionData) {\n        const initialExpanded = {};\n        Object.keys(submissionData).forEach(key => {\n          if (typeof submissionData[key] === 'object' && submissionData[key] !== null) {\n            initialExpanded[key] = true;\n          }\n        });\n        setExpandedSections(initialExpanded);\n      }\n    }, []);\n    const toggleMainDetails = () => {\n      setIsExpanded(!isExpanded);\n    };\n    const toggleSection = sectionKey => {\n      setExpandedSections(prev => ({\n        ...prev,\n        [sectionKey]: !prev[sectionKey]\n      }));\n    };\n    const renderValue = (key, value) => {\n      // Skip fields that are N/A, null, undefined, or empty\n      const shouldSkipField = (fieldKey, fieldValue) => {\n        var _submissionData$addit, _submissionData$addit2, _submissionData$addit3;\n        // Fields to skip for all forms\n        const alwaysSkipFields = ['platform', 'platform_other', 'dealer_name', 'contractor_name', 'other_source_detail', 'fileAttachments', 'phone', 'state'];\n\n        // Takeoff-specific fields to skip when serviceType is \"3D Model\"\n        const takeoffFields = ['cadAvailable', 'scopeOptions', 'strippingDepth', 'replacementDepth'];\n\n        // Model-specific fields to skip when serviceType is \"Takeoff\"\n        const modelFields = ['revision', 'fileFormats', 'additionalRequests', 'erosionSurfaceDueDate', 'advancedUtilities', 'structureCount'];\n\n        // Skip if it's an always-skip field (regardless of value for fileAttachments)\n        if (alwaysSkipFields.includes(fieldKey)) {\n          return true;\n        }\n\n        // Skip takeoff fields for 3D Model forms\n        if ((submissionData === null || submissionData === void 0 ? void 0 : submissionData.serviceType) === '3D Model' && takeoffFields.includes(fieldKey)) {\n          return true;\n        }\n\n        // Skip model fields for Takeoff forms\n        if ((submissionData === null || submissionData === void 0 ? void 0 : submissionData.serviceType) === 'Takeoff' && modelFields.includes(fieldKey)) {\n          return true;\n        }\n\n        // Skip conditional fields that weren't selected/enabled\n        // Hide erosion surface due date if Initial Erosion Surface wasn't selected\n        if (fieldKey === 'erosionSurfaceDueDate' && (!(submissionData !== null && submissionData !== void 0 && (_submissionData$addit = submissionData.additionalRequests) !== null && _submissionData$addit !== void 0 && _submissionData$addit.includes('Initial Erosion Surface')) || !fieldValue)) {\n          return true;\n        }\n\n        // Hide advanced utilities if 3D/Elevated Pipe wasn't selected OR if advanced utilities checkbox wasn't checked\n        if (fieldKey === 'advancedUtilities' && (!(submissionData !== null && submissionData !== void 0 && (_submissionData$addit2 = submissionData.additionalRequests) !== null && _submissionData$addit2 !== void 0 && _submissionData$addit2.includes('3D/Elevated Pipe')) || !fieldValue)) {\n          return true;\n        }\n\n        // Hide structure count if 3D/Elevated Pipe wasn't selected OR advanced utilities isn't enabled or has no value\n        if (fieldKey === 'structureCount' && (!(submissionData !== null && submissionData !== void 0 && (_submissionData$addit3 = submissionData.additionalRequests) !== null && _submissionData$addit3 !== void 0 && _submissionData$addit3.includes('3D/Elevated Pipe')) || !(submissionData !== null && submissionData !== void 0 && submissionData.advancedUtilities) || !fieldValue)) {\n          return true;\n        }\n\n        // Hide project info and special instructions if empty\n        if ((fieldKey === 'projectInfo' || fieldKey === 'specialInstructions') && (!fieldValue || fieldValue === null || fieldValue === undefined || fieldValue === '')) {\n          return true;\n        }\n        return false;\n      };\n\n      // Don't render if this field should be skipped\n      if (shouldSkipField(key, value)) {\n        return null;\n      }\n\n      // Handle arrays of objects (like contacts)\n      if (Array.isArray(value) && value.length > 0 && typeof value[0] === 'object') {\n        const sectionExpanded = expandedSections[key] !== false;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"confirmation-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"confirmation-section-header clickable\",\n            onClick: () => toggleSection(key),\n            children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n              className: `confirmation-dropdown-arrow ${sectionExpanded ? 'expanded' : ''}`,\n              width: \"12\",\n              height: \"12\",\n              viewBox: \"0 0 12 12\",\n              fill: \"currentColor\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M3 5l3 3 3-3z\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 317,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"confirmation-section-title\",\n              children: [formatFieldName(key), \" (\", value.length, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 13\n          }, this), sectionExpanded && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"confirmation-section-body\",\n            children: value.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"confirmation-section-content\",\n              style: {\n                marginBottom: '15px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                style: {\n                  margin: '10px 0 5px 0'\n                },\n                children: [formatFieldName(key).slice(0, -1), \" \", index + 1]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 21\n              }, this), Object.entries(item).filter(([subKey, subValue]) => !shouldSkipField(subKey, subValue)).map(([subKey, subValue]) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"confirmation-detail-row\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"confirmation-detail-label\",\n                  children: [formatFieldName(subKey), \":\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 330,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"confirmation-detail-value\",\n                  children: formatValue(subValue)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 331,\n                  columnNumber: 27\n                }, this)]\n              }, subKey, true, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 25\n              }, this))]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 15\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this);\n      }\n\n      // Handle single objects\n      if (typeof value === 'object' && !Array.isArray(value) && value !== null) {\n        const filteredEntries = Object.entries(value).filter(([subKey, subValue]) => !shouldSkipField(subKey, subValue));\n\n        // Don't render empty sections\n        if (filteredEntries.length === 0) return null;\n        const sectionExpanded = expandedSections[key] !== false;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"confirmation-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"confirmation-section-header clickable\",\n            onClick: () => toggleSection(key),\n            children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n              className: `confirmation-dropdown-arrow ${sectionExpanded ? 'expanded' : ''}`,\n              width: \"12\",\n              height: \"12\",\n              viewBox: \"0 0 12 12\",\n              fill: \"currentColor\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M3 5l3 3 3-3z\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"confirmation-section-title\",\n              children: formatFieldName(key)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 13\n          }, this), sectionExpanded && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"confirmation-section-body\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"confirmation-section-content\",\n              children: filteredEntries.map(([subKey, subValue]) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"confirmation-detail-row\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"confirmation-detail-label\",\n                  children: [formatFieldName(subKey), \":\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 374,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"confirmation-detail-value\",\n                  children: formatValue(subValue)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 375,\n                  columnNumber: 23\n                }, this)]\n              }, subKey, true, {\n                fileName: _jsxFileName,\n                lineNumber: 373,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 15\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this);\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirmation-detail-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"confirmation-detail-label\",\n          children: [formatFieldName(key), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"confirmation-detail-value\",\n          children: formatValue(value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 11\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this);\n    };\n    if (!submissionData || !showDetails) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"confirmation-details\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirmation-details-header\",\n        onClick: toggleMainDetails,\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          className: `confirmation-dropdown-arrow ${isExpanded ? 'expanded' : ''}`,\n          width: \"16\",\n          height: \"16\",\n          viewBox: \"0 0 16 16\",\n          fill: \"currentColor\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M4 6l4 4 4-4z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"confirmation-details-title\",\n          children: \"Submission Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this), isExpanded && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirmation-details-content\",\n        children: Object.entries(submissionData).map(([key, value]) => renderValue(key, value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this);\n  };\n  _s2(SubmissionDetails, \"Qi8GKXY5vOVIC+TB4SOQKwPh7CI=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"confirmation-page\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"confirmation-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirmation-icon\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          className: \"checkmark-icon\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M22 11.08V12a10 10 0 1 1-5.93-9.14\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"polyline\", {\n            points: \"22 4 12 14.01 9 11.01\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"confirmation-title\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"confirmation-message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 9\n      }, this), customContent && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirmation-custom-content\",\n        children: customContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 11\n      }, this), submissionData && showDetails && /*#__PURE__*/_jsxDEV(SubmissionDetails, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 43\n      }, this), uploadedFiles && uploadedFiles.length > 0 ? /*#__PURE__*/_jsxDEV(UploadedFilesSection, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 11\n      }, this) : console.log('[ConfirmationPage] No uploaded files to display'), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirmation-footer\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"If you have any questions, please contact us at support@ab-civil.com\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 422,\n    columnNumber: 5\n  }, this);\n};\n_c = ConfirmationPage;\nexport default ConfirmationPage;\nvar _c;\n$RefreshReg$(_c, \"ConfirmationPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","ConfirmationPage","title","message","submissionData","showDetails","onNewSubmission","customContent","referenceNumber","estimatedResponseTime","uploadedFiles","_s","$RefreshSig$","_s2","console","log","hasUploadedFiles","uploadedFilesLength","length","formatValue","value","undefined","Array","isArray","join","JSON","stringify","String","formatFieldName","fieldName","replace","str","toUpperCase","trim","formatFileSize","bytes","k","sizes","i","Math","floor","round","pow","getFileTypeInfo","filename","label","className","ext","split","pop","toLowerCase","includes","organizeFilesByFolder","files","folderStructure","forEach","file","folderPath","folder","relativePath","substring","lastIndexOf","push","UploadedFilesSection","isExpanded","setIsExpanded","expandedFolders","setExpandedFolders","folderNames","Object","keys","sort","a","b","localeCompare","toggleExpanded","toggleFolder","folderName","prev","totalFiles","totalFolders","filter","name","children","onClick","width","height","viewBox","fill","stroke","strokeWidth","d","fileName","_jsxFileName","lineNumber","columnNumber","map","isFolder","isFolderExpanded","index","fileType","style","marginLeft","borderLeft","size","SubmissionDetails","expandedSections","setExpandedSections","useEffect","initialExpanded","key","toggleMainDetails","toggleSection","sectionKey","renderValue","shouldSkipField","fieldKey","fieldValue","_submissionData$addit","_submissionData$addit2","_submissionData$addit3","alwaysSkipFields","takeoffFields","modelFields","serviceType","additionalRequests","advancedUtilities","sectionExpanded","item","marginBottom","margin","slice","entries","subKey","subValue","filteredEntries","xmlns","strokeLinecap","strokeLinejoin","points","_c","$RefreshReg$"],"sources":["/Users/adambower/Dev/new-website-adam/website/src/shared/components/ConfirmationPage/ConfirmationPage.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport './ConfirmationPage.css';\n\nconst ConfirmationPage = ({ \n  title = \"Thank You!\", \n  message = \"Your submission has been received.\",\n  submissionData = null,\n  showDetails = false,\n  onNewSubmission = null,\n  customContent = null,\n  referenceNumber = null,\n  estimatedResponseTime = null,\n  uploadedFiles = null\n}) => {\n  // Debug logging for production\n  console.log('[ConfirmationPage] Props received:', {\n    hasUploadedFiles: !!uploadedFiles,\n    uploadedFilesLength: uploadedFiles ? uploadedFiles.length : 0,\n    uploadedFiles: uploadedFiles\n  });\n  const formatValue = (value) => {\n    if (value === null || value === undefined || value === '') {\n      return 'N/A';\n    }\n    if (Array.isArray(value)) {\n      // Check if array contains objects (like contacts)\n      if (value.length > 0 && typeof value[0] === 'object') {\n        return 'See details below';\n      }\n      return value.length > 0 ? value.join(', ') : 'None selected';\n    }\n    if (typeof value === 'boolean') {\n      return value ? 'Yes' : 'No';\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value, null, 2);\n    }\n    return String(value);\n  };\n\n  const formatFieldName = (fieldName) => {\n    return fieldName\n      .replace(/_/g, ' ')\n      .replace(/([A-Z])/g, ' $1')\n      .replace(/^./, str => str.toUpperCase())\n      .trim();\n  };\n\n  // Format file size\n  const formatFileSize = (bytes) => {\n    if (!bytes || bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];\n  };\n\n  // Get file type info based on filename\n  const getFileTypeInfo = (filename) => {\n    if (!filename) return { label: 'FILE', className: 'file-type-default' };\n    const ext = filename.split('.').pop().toLowerCase();\n    \n    if (['pdf'].includes(ext)) return { label: 'PDF', className: 'file-type-pdf' };\n    if (['jpg', 'jpeg', 'png', 'gif', 'webp', 'bmp'].includes(ext)) return { label: 'IMG', className: 'file-type-image' };\n    if (['zip', 'rar', '7z'].includes(ext)) return { label: 'ZIP', className: 'file-type-archive' };\n    if (['dwg', 'dxf', 'dwf'].includes(ext)) return { label: 'CAD', className: 'file-type-cad' };\n    if (['xls', 'xlsx', 'xlsm'].includes(ext)) return { label: 'XLS', className: 'file-type-excel' };\n    if (['txt', 'csv'].includes(ext)) return { label: 'TXT', className: 'file-type-text' };\n    if (['rvt', 'rfa', 'ifc'].includes(ext)) return { label: 'BIM', className: 'file-type-bim' };\n    return { label: 'FILE', className: 'file-type-default' };\n  };\n\n  // Organize files by folder structure\n  const organizeFilesByFolder = (files) => {\n    const folderStructure = {};\n    \n    files.forEach(file => {\n      // Get the folder path from the file\n      const folderPath = file.folder || (file.relativePath ? \n        file.relativePath.substring(0, file.relativePath.lastIndexOf('/')) : \n        '');\n      \n      // If no folder, put in root\n      const folder = folderPath || 'root';\n      \n      if (!folderStructure[folder]) {\n        folderStructure[folder] = [];\n      }\n      \n      folderStructure[folder].push(file);\n    });\n    \n    return folderStructure;\n  };\n\n  const UploadedFilesSection = () => {\n    const [isExpanded, setIsExpanded] = useState(false);\n    const [expandedFolders, setExpandedFolders] = useState({});\n    \n    const folderStructure = organizeFilesByFolder(uploadedFiles);\n    const folderNames = Object.keys(folderStructure).sort((a, b) => {\n      if (a === 'root') return -1;\n      if (b === 'root') return 1;\n      return a.localeCompare(b);\n    });\n    \n    const toggleExpanded = () => {\n      setIsExpanded(!isExpanded);\n    };\n    \n    const toggleFolder = (folderName) => {\n      setExpandedFolders(prev => ({\n        ...prev,\n        [folderName]: !prev[folderName]\n      }));\n    };\n    \n    // Count total files\n    const totalFiles = uploadedFiles.length;\n    const totalFolders = folderNames.filter(name => name !== 'root').length;\n    \n    return (\n      <div className=\"confirmation-files-section\">\n        <div \n          className=\"confirmation-files-header clickable\"\n          onClick={toggleExpanded}\n        >\n          <svg \n            className={`confirmation-chevron ${isExpanded ? 'expanded' : ''}`}\n            width=\"20\" \n            height=\"20\" \n            viewBox=\"0 0 20 20\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n          >\n            <path d=\"M6 8l4 4 4-4\" />\n          </svg>\n          <h2 className=\"confirmation-files-title\">\n            Uploaded Files \n            <span className=\"files-summary\">\n              ({totalFiles} {totalFiles === 1 ? 'file' : 'files'}{totalFolders > 0 ? ` in ${totalFolders} ${totalFolders === 1 ? 'folder' : 'folders'}` : ''})\n            </span>\n          </h2>\n        </div>\n        \n        {isExpanded && (\n          <div className=\"confirmation-files-content\">\n            <div className=\"confirmation-folders-list\">\n              {folderNames.map(folderName => {\n                const isFolder = folderName !== 'root';\n                const isFolderExpanded = expandedFolders[folderName] !== false;\n                const files = folderStructure[folderName];\n                \n                return (\n                  <div key={folderName} className={isFolder ? \"folder-group\" : \"root-files\"}>\n                    {isFolder ? (\n                      <>\n                        <div className=\"folder-header\">\n                          <svg \n                            className=\"folder-icon\"\n                            width=\"15\" \n                            height=\"15\" \n                            viewBox=\"0 0 16 16\" \n                            fill=\"currentColor\"\n                          >\n                            <path d=\"M9.828 3h3.982a2 2 0 0 1 1.992 2.181l-.637 7A2 2 0 0 1 13.174 14H2.826a2 2 0 0 1-1.991-1.819l-.637-7a1.99 1.99 0 0 1 .342-1.31L.5 3a2 2 0 0 1 2-2h3.672a2 2 0 0 1 1.414.586l.828.828A2 2 0 0 0 9.828 3z\"/>\n                          </svg>\n                          <span className=\"folder-name\">{folderName}</span>\n                          <span className=\"folder-file-count\">({files.length} files)</span>\n                        </div>\n                        {files.map((file, index) => {\n                          const fileType = getFileTypeInfo(file.filename || file.name);\n                          return (\n                            <div key={index} className=\"file-item compact\" style={{ marginLeft: '20px', borderLeft: '1px dashed #d1d5db' }}>\n                              <div className=\"file-info\">\n                                <span className={`file-type-badge ${fileType.className}`}>\n                                  {fileType.label}\n                                </span>\n                                <span className=\"file-name\">{file.filename || file.name}</span>\n                                <span className=\"file-size\">{formatFileSize(file.size)}</span>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </>\n                    ) : (\n                      files.map((file, index) => {\n                        const fileType = getFileTypeInfo(file.filename || file.name);\n                        return (\n                          <div key={index} className=\"file-item compact\">\n                            <div className=\"file-info\">\n                              <span className={`file-type-badge ${fileType.className}`}>\n                                {fileType.label}\n                              </span>\n                              <span className=\"file-name\">{file.filename || file.name}</span>\n                              <span className=\"file-size\">{formatFileSize(file.size)}</span>\n                            </div>\n                          </div>\n                        );\n                      })\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const SubmissionDetails = () => {\n    const [isExpanded, setIsExpanded] = useState(true);\n    const [expandedSections, setExpandedSections] = useState({});\n    \n    React.useEffect(() => {\n      // Initialize all sections as expanded\n      if (submissionData) {\n        const initialExpanded = {};\n        Object.keys(submissionData).forEach(key => {\n          if (typeof submissionData[key] === 'object' && submissionData[key] !== null) {\n            initialExpanded[key] = true;\n          }\n        });\n        setExpandedSections(initialExpanded);\n      }\n    }, []);\n    \n    const toggleMainDetails = () => {\n      setIsExpanded(!isExpanded);\n    };\n    \n    const toggleSection = (sectionKey) => {\n      setExpandedSections(prev => ({\n        ...prev,\n        [sectionKey]: !prev[sectionKey]\n      }));\n    };\n\n    const renderValue = (key, value) => {\n      // Skip fields that are N/A, null, undefined, or empty\n      const shouldSkipField = (fieldKey, fieldValue) => {\n        // Fields to skip for all forms\n        const alwaysSkipFields = ['platform', 'platform_other', 'dealer_name', 'contractor_name', 'other_source_detail', 'fileAttachments', 'phone', 'state'];\n        \n        // Takeoff-specific fields to skip when serviceType is \"3D Model\"\n        const takeoffFields = ['cadAvailable', 'scopeOptions', 'strippingDepth', 'replacementDepth'];\n        \n        // Model-specific fields to skip when serviceType is \"Takeoff\"\n        const modelFields = ['revision', 'fileFormats', 'additionalRequests', 'erosionSurfaceDueDate', 'advancedUtilities', 'structureCount'];\n        \n        // Skip if it's an always-skip field (regardless of value for fileAttachments)\n        if (alwaysSkipFields.includes(fieldKey)) {\n          return true;\n        }\n        \n        // Skip takeoff fields for 3D Model forms\n        if (submissionData?.serviceType === '3D Model' && takeoffFields.includes(fieldKey)) {\n          return true;\n        }\n        \n        // Skip model fields for Takeoff forms\n        if (submissionData?.serviceType === 'Takeoff' && modelFields.includes(fieldKey)) {\n          return true;\n        }\n        \n        // Skip conditional fields that weren't selected/enabled\n        // Hide erosion surface due date if Initial Erosion Surface wasn't selected\n        if (fieldKey === 'erosionSurfaceDueDate' && \n            (!submissionData?.additionalRequests?.includes('Initial Erosion Surface') || !fieldValue)) {\n          return true;\n        }\n        \n        // Hide advanced utilities if 3D/Elevated Pipe wasn't selected OR if advanced utilities checkbox wasn't checked\n        if (fieldKey === 'advancedUtilities' && \n            (!submissionData?.additionalRequests?.includes('3D/Elevated Pipe') || !fieldValue)) {\n          return true;\n        }\n        \n        // Hide structure count if 3D/Elevated Pipe wasn't selected OR advanced utilities isn't enabled or has no value\n        if (fieldKey === 'structureCount' && \n            (!submissionData?.additionalRequests?.includes('3D/Elevated Pipe') || !submissionData?.advancedUtilities || !fieldValue)) {\n          return true;\n        }\n        \n        // Hide project info and special instructions if empty\n        if ((fieldKey === 'projectInfo' || fieldKey === 'specialInstructions') && \n            (!fieldValue || fieldValue === null || fieldValue === undefined || fieldValue === '')) {\n          return true;\n        }\n        \n        return false;\n      };\n\n      // Don't render if this field should be skipped\n      if (shouldSkipField(key, value)) {\n        return null;\n      }\n\n      // Handle arrays of objects (like contacts)\n      if (Array.isArray(value) && value.length > 0 && typeof value[0] === 'object') {\n        const sectionExpanded = expandedSections[key] !== false;\n        return (\n          <div key={key} className=\"confirmation-section\">\n            <div \n              className=\"confirmation-section-header clickable\"\n              onClick={() => toggleSection(key)}\n            >\n              <svg \n                className={`confirmation-dropdown-arrow ${sectionExpanded ? 'expanded' : ''}`}\n                width=\"12\" \n                height=\"12\" \n                viewBox=\"0 0 12 12\"\n                fill=\"currentColor\"\n              >\n                <path d=\"M3 5l3 3 3-3z\"/>\n              </svg>\n              <h3 className=\"confirmation-section-title\">{formatFieldName(key)} ({value.length})</h3>\n            </div>\n            {sectionExpanded && (\n              <div className=\"confirmation-section-body\">\n                {value.map((item, index) => (\n                  <div key={index} className=\"confirmation-section-content\" style={{ marginBottom: '15px' }}>\n                    <h4 style={{ margin: '10px 0 5px 0' }}>{formatFieldName(key).slice(0, -1)} {index + 1}</h4>\n                    {Object.entries(item)\n                      .filter(([subKey, subValue]) => !shouldSkipField(subKey, subValue))\n                      .map(([subKey, subValue]) => (\n                        <div key={subKey} className=\"confirmation-detail-row\">\n                          <span className=\"confirmation-detail-label\">{formatFieldName(subKey)}:</span>\n                          <span className=\"confirmation-detail-value\">{formatValue(subValue)}</span>\n                        </div>\n                      ))}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        );\n      }\n      \n      // Handle single objects\n      if (typeof value === 'object' && !Array.isArray(value) && value !== null) {\n        const filteredEntries = Object.entries(value)\n          .filter(([subKey, subValue]) => !shouldSkipField(subKey, subValue));\n        \n        // Don't render empty sections\n        if (filteredEntries.length === 0) return null;\n        \n        const sectionExpanded = expandedSections[key] !== false;\n        \n        return (\n          <div key={key} className=\"confirmation-section\">\n            <div \n              className=\"confirmation-section-header clickable\"\n              onClick={() => toggleSection(key)}\n            >\n              <svg \n                className={`confirmation-dropdown-arrow ${sectionExpanded ? 'expanded' : ''}`}\n                width=\"12\" \n                height=\"12\" \n                viewBox=\"0 0 12 12\"\n                fill=\"currentColor\"\n              >\n                <path d=\"M3 5l3 3 3-3z\"/>\n              </svg>\n              <h3 className=\"confirmation-section-title\">{formatFieldName(key)}</h3>\n            </div>\n            {sectionExpanded && (\n              <div className=\"confirmation-section-body\">\n                <div className=\"confirmation-section-content\">\n                  {filteredEntries.map(([subKey, subValue]) => (\n                    <div key={subKey} className=\"confirmation-detail-row\">\n                      <span className=\"confirmation-detail-label\">{formatFieldName(subKey)}:</span>\n                      <span className=\"confirmation-detail-value\">{formatValue(subValue)}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      }\n\n      return (\n        <div key={key} className=\"confirmation-detail-row\">\n          <span className=\"confirmation-detail-label\">{formatFieldName(key)}:</span>\n          <span className=\"confirmation-detail-value\">{formatValue(value)}</span>\n        </div>\n      );\n    };\n\n    if (!submissionData || !showDetails) return null;\n    \n    return (\n      <div className=\"confirmation-details\">\n        <div \n          className=\"confirmation-details-header\"\n          onClick={toggleMainDetails}\n        >\n          <svg \n            className={`confirmation-dropdown-arrow ${isExpanded ? 'expanded' : ''}`}\n            width=\"16\" \n            height=\"16\" \n            viewBox=\"0 0 16 16\"\n            fill=\"currentColor\"\n          >\n            <path d=\"M4 6l4 4 4-4z\"/>\n          </svg>\n          <h2 className=\"confirmation-details-title\">Submission Details</h2>\n        </div>\n        {isExpanded && (\n          <div className=\"confirmation-details-content\">\n            {Object.entries(submissionData).map(([key, value]) => renderValue(key, value))}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"confirmation-page\">\n      <div className=\"confirmation-container\">\n        <div className=\"confirmation-icon\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            className=\"checkmark-icon\"\n          >\n            <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\" />\n            <polyline points=\"22 4 12 14.01 9 11.01\" />\n          </svg>\n        </div>\n\n        <h1 className=\"confirmation-title\">{title}</h1>\n        <p className=\"confirmation-message\">{message}</p>\n\n\n\n        {customContent && (\n          <div className=\"confirmation-custom-content\">\n            {customContent}\n          </div>\n        )}\n\n        {submissionData && showDetails && <SubmissionDetails />}\n\n        {/* File Upload Preview Section */}\n        {uploadedFiles && uploadedFiles.length > 0 ? (\n          <UploadedFilesSection />\n        ) : (\n          console.log('[ConfirmationPage] No uploaded files to display')\n        )}\n\n        <div className=\"confirmation-footer\">\n          <p>If you have any questions, please contact us at support@ab-civil.com</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ConfirmationPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}