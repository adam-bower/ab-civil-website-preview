{"ast":null,"code":"import _objectSpread from\"/Users/adambower/Dev/ab-civil-website-preview/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\n * Security utilities for form validation and sanitization\n *//**\n * Sanitize input to prevent XSS attacks\n * @param {string} input - User input to sanitize\n * @returns {string} Sanitized input\n */export const sanitizeInput=input=>{if(!input)return'';// Convert to string if not already\nconst str=String(input);// Remove script tags and dangerous HTML, but preserve spaces and normal text\nlet sanitized=str.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,'').replace(/<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi,'').replace(/<object\\b[^<]*(?:(?!<\\/object>)<[^<]*)*<\\/object>/gi,'').replace(/<embed\\b[^<]*(?:(?!<\\/embed>)<[^<]*)*<\\/embed>/gi,'');// Remove event handlers\nsanitized=sanitized.replace(/on\\w+\\s*=\\s*[\"'][^\"']*[\"']/gi,'');sanitized=sanitized.replace(/on\\w+\\s*=\\s*[^\\s>]*/gi,'');// Escape dangerous characters but preserve spaces\nsanitized=sanitized.replace(/[<>]/g,match=>{const escapeMap={'<':'&lt;','>':'&gt;'};return escapeMap[match];});// Preserve spaces but trim start and end\nreturn sanitized.trim();};/**\n * Validate email format\n * @param {string} email - Email to validate\n * @returns {boolean} True if valid\n */export const isValidEmail=email=>{const emailRegex=/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;return emailRegex.test(email);};/**\n * Validate phone number format (US)\n * @param {string} phone - Phone number to validate\n * @returns {boolean} True if valid\n */export const isValidPhone=phone=>{// Remove all formatting and +1 country code for validation\nlet cleaned=phone.replace(/\\D/g,'');// Remove leading 1 if present (from +1 country code)\nif(cleaned.length===11&&cleaned.startsWith('1')){cleaned=cleaned.substring(1);}// Should be exactly 10 digits after removing country code\nreturn cleaned.length===10;};/**\n * Sanitize file path to prevent directory traversal\n * @param {string} filename - File name to sanitize\n * @returns {string} Sanitized filename\n */export const sanitizeFilename=filename=>{if(!filename)return'';// Remove path traversal attempts\nreturn filename.replace(/\\.\\./g,'').replace(/[\\/\\\\]/g,'_').replace(/^\\.+/,'').replace(/[^a-zA-Z0-9.\\-_]/g,'_').substring(0,255);// Limit filename length\n};/**\n * Generate cryptographically secure random ID\n * @param {number} length - Length of ID (default 16)\n * @returns {string} Random ID\n */export const generateSecureId=function(){let length=arguments.length>0&&arguments[0]!==undefined?arguments[0]:16;const chars='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';const array=new Uint8Array(length);if(typeof window!=='undefined'&&window.crypto){window.crypto.getRandomValues(array);}else{// Fallback for Node.js environment\nfor(let i=0;i<length;i++){array[i]=Math.floor(Math.random()*256);}}let result='';for(let i=0;i<length;i++){result+=chars[array[i]%chars.length];}return result;};/**\n * Validate form data against injection attacks\n * @param {object} data - Form data to validate\n * @returns {object} Validation result\n */export const validateFormData=data=>{const errors={};const sqlInjectionPattern=/(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION|WHERE|FROM|ORDER BY|GROUP BY|HAVING)\\b|--|\\/\\*|\\*\\/|xp_|sp_|<script|javascript:|onerror=|onload=)/gi;for(const[key,value]of Object.entries(data)){if(typeof value==='string'){// Check for SQL injection patterns\nif(sqlInjectionPattern.test(value)){errors[key]='Invalid characters detected';}// Check for excessive length (potential DoS)\nif(value.length>10000){errors[key]='Input too long';}}}return{isValid:Object.keys(errors).length===0,errors};};/**\n * Rate limiting tracker (client-side)\n */class RateLimiter{constructor(){let maxAttempts=arguments.length>0&&arguments[0]!==undefined?arguments[0]:5;let windowMs=arguments.length>1&&arguments[1]!==undefined?arguments[1]:60000;this.attempts=new Map();this.maxAttempts=maxAttempts;this.windowMs=windowMs;}check(key){const now=Date.now();const userAttempts=this.attempts.get(key)||[];// Clean old attempts\nconst recentAttempts=userAttempts.filter(timestamp=>now-timestamp<this.windowMs);if(recentAttempts.length>=this.maxAttempts){const oldestAttempt=recentAttempts[0];const timeToWait=Math.ceil((this.windowMs-(now-oldestAttempt))/1000);return{allowed:false,timeToWait,message:\"Too many attempts. Please wait \".concat(timeToWait,\" seconds.\")};}// Add current attempt\nrecentAttempts.push(now);this.attempts.set(key,recentAttempts);return{allowed:true};}reset(key){this.attempts.delete(key);}}// Export a singleton rate limiter instance\nexport const formSubmissionLimiter=new RateLimiter(3,60000);// 3 attempts per minute\n/**\n * Mask sensitive data for logging\n * @param {any} data - Data to mask\n * @returns {any} Masked data\n */export const maskSensitiveData=data=>{if(!data)return data;const sensitiveFields=['email','phone','phone_number','company_phone','email_w9_coi','ssn','password'];const mask=obj=>{if(typeof obj!=='object'||obj===null)return obj;const masked=Array.isArray(obj)?[...obj]:_objectSpread({},obj);for(const[key,value]of Object.entries(masked)){const lowerKey=key.toLowerCase();if(sensitiveFields.some(field=>lowerKey.includes(field))){if(typeof value==='string'&&value.length>0){// Keep first and last character, mask the rest\nmasked[key]=value.length>2?value[0]+'*'.repeat(Math.min(value.length-2,10))+value[value.length-1]:'*'.repeat(value.length);}}else if(typeof value==='object'&&value!==null){masked[key]=mask(value);}}return masked;};return mask(data);};/**\n * Validate file type and size\n * @param {File} file - File to validate\n * @param {Object} options - Validation options\n * @returns {Object} Validation result\n */export const validateFile=function(file){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const{maxSize=2*1024*1024*1024,// 2GB default\nallowedTypes=[],allowedExtensions=[]}=options;const errors=[];// Check file size\nif(file.size>maxSize){errors.push(\"File size exceeds \".concat(Math.round(maxSize/(1024*1024)),\"MB limit\"));}// Check file type\nif(allowedTypes.length>0&&!allowedTypes.includes(file.type)){errors.push('File type not allowed');}// Check file extension\nif(allowedExtensions.length>0){const extension='.'+file.name.split('.').pop().toLowerCase();if(!allowedExtensions.includes(extension)){errors.push('File extension not allowed');}}// Check for potentially dangerous file names\nconst dangerousPatterns=[/\\.exe$/i,/\\.bat$/i,/\\.cmd$/i,/\\.com$/i,/\\.pif$/i,/\\.scr$/i,/\\.vbs$/i,/\\.js$/i,/\\.jar$/i];if(dangerousPatterns.some(pattern=>pattern.test(file.name))){errors.push('Potentially dangerous file type detected');}return{isValid:errors.length===0,errors};};/**\n * Check if running in iframe and validate parent origin\n * @param {string[]} allowedOrigins - List of allowed parent origins\n * @returns {boolean} True if allowed\n */export const validateIframeOrigin=function(){let allowedOrigins=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];if(typeof window==='undefined')return true;// Check if in iframe\nconst inIframe=window.self!==window.top;if(!inIframe)return true;// If in iframe, validate parent origin\ntry{const parentOrigin=document.referrer?new URL(document.referrer).origin:'';if(allowedOrigins.length===0){// If no origins specified, allow all\nreturn true;}return allowedOrigins.includes(parentOrigin);}catch(e){console.error('Error validating iframe origin:',e);return false;}};export default{sanitizeInput,isValidEmail,isValidPhone,sanitizeFilename,generateSecureId,validateFormData,formSubmissionLimiter,maskSensitiveData,validateFile,validateIframeOrigin};","map":{"version":3,"names":["sanitizeInput","input","str","String","sanitized","replace","match","escapeMap","trim","isValidEmail","email","emailRegex","test","isValidPhone","phone","cleaned","length","startsWith","substring","sanitizeFilename","filename","generateSecureId","arguments","undefined","chars","array","Uint8Array","window","crypto","getRandomValues","i","Math","floor","random","result","validateFormData","data","errors","sqlInjectionPattern","key","value","Object","entries","isValid","keys","RateLimiter","constructor","maxAttempts","windowMs","attempts","Map","check","now","Date","userAttempts","get","recentAttempts","filter","timestamp","oldestAttempt","timeToWait","ceil","allowed","message","concat","push","set","reset","delete","formSubmissionLimiter","maskSensitiveData","sensitiveFields","mask","obj","masked","Array","isArray","_objectSpread","lowerKey","toLowerCase","some","field","includes","repeat","min","validateFile","file","options","maxSize","allowedTypes","allowedExtensions","size","round","type","extension","name","split","pop","dangerousPatterns","pattern","validateIframeOrigin","allowedOrigins","inIframe","self","top","parentOrigin","document","referrer","URL","origin","e","console","error"],"sources":["/Users/adambower/Dev/ab-civil-website-preview/src/shared/utils/security.js"],"sourcesContent":["/**\n * Security utilities for form validation and sanitization\n */\n\n/**\n * Sanitize input to prevent XSS attacks\n * @param {string} input - User input to sanitize\n * @returns {string} Sanitized input\n */\nexport const sanitizeInput = (input) => {\n  if (!input) return '';\n  \n  // Convert to string if not already\n  const str = String(input);\n  \n  // Remove script tags and dangerous HTML, but preserve spaces and normal text\n  let sanitized = str\n    .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '')\n    .replace(/<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi, '')\n    .replace(/<object\\b[^<]*(?:(?!<\\/object>)<[^<]*)*<\\/object>/gi, '')\n    .replace(/<embed\\b[^<]*(?:(?!<\\/embed>)<[^<]*)*<\\/embed>/gi, '');\n  \n  // Remove event handlers\n  sanitized = sanitized.replace(/on\\w+\\s*=\\s*[\"'][^\"']*[\"']/gi, '');\n  sanitized = sanitized.replace(/on\\w+\\s*=\\s*[^\\s>]*/gi, '');\n  \n  // Escape dangerous characters but preserve spaces\n  sanitized = sanitized.replace(/[<>]/g, (match) => {\n    const escapeMap = {\n      '<': '&lt;',\n      '>': '&gt;'\n    };\n    return escapeMap[match];\n  });\n  \n  // Preserve spaces but trim start and end\n  return sanitized.trim();\n};\n\n/**\n * Validate email format\n * @param {string} email - Email to validate\n * @returns {boolean} True if valid\n */\nexport const isValidEmail = (email) => {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n  return emailRegex.test(email);\n};\n\n/**\n * Validate phone number format (US)\n * @param {string} phone - Phone number to validate\n * @returns {boolean} True if valid\n */\nexport const isValidPhone = (phone) => {\n  // Remove all formatting and +1 country code for validation\n  let cleaned = phone.replace(/\\D/g, '');\n  // Remove leading 1 if present (from +1 country code)\n  if (cleaned.length === 11 && cleaned.startsWith('1')) {\n    cleaned = cleaned.substring(1);\n  }\n  // Should be exactly 10 digits after removing country code\n  return cleaned.length === 10;\n};\n\n/**\n * Sanitize file path to prevent directory traversal\n * @param {string} filename - File name to sanitize\n * @returns {string} Sanitized filename\n */\nexport const sanitizeFilename = (filename) => {\n  if (!filename) return '';\n  \n  // Remove path traversal attempts\n  return filename\n    .replace(/\\.\\./g, '')\n    .replace(/[\\/\\\\]/g, '_')\n    .replace(/^\\.+/, '')\n    .replace(/[^a-zA-Z0-9.\\-_]/g, '_')\n    .substring(0, 255); // Limit filename length\n};\n\n/**\n * Generate cryptographically secure random ID\n * @param {number} length - Length of ID (default 16)\n * @returns {string} Random ID\n */\nexport const generateSecureId = (length = 16) => {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  const array = new Uint8Array(length);\n  \n  if (typeof window !== 'undefined' && window.crypto) {\n    window.crypto.getRandomValues(array);\n  } else {\n    // Fallback for Node.js environment\n    for (let i = 0; i < length; i++) {\n      array[i] = Math.floor(Math.random() * 256);\n    }\n  }\n  \n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars[array[i] % chars.length];\n  }\n  \n  return result;\n};\n\n/**\n * Validate form data against injection attacks\n * @param {object} data - Form data to validate\n * @returns {object} Validation result\n */\nexport const validateFormData = (data) => {\n  const errors = {};\n  const sqlInjectionPattern = /(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION|WHERE|FROM|ORDER BY|GROUP BY|HAVING)\\b|--|\\/\\*|\\*\\/|xp_|sp_|<script|javascript:|onerror=|onload=)/gi;\n  \n  for (const [key, value] of Object.entries(data)) {\n    if (typeof value === 'string') {\n      // Check for SQL injection patterns\n      if (sqlInjectionPattern.test(value)) {\n        errors[key] = 'Invalid characters detected';\n      }\n      \n      // Check for excessive length (potential DoS)\n      if (value.length > 10000) {\n        errors[key] = 'Input too long';\n      }\n    }\n  }\n  \n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\n\n/**\n * Rate limiting tracker (client-side)\n */\nclass RateLimiter {\n  constructor(maxAttempts = 5, windowMs = 60000) {\n    this.attempts = new Map();\n    this.maxAttempts = maxAttempts;\n    this.windowMs = windowMs;\n  }\n  \n  check(key) {\n    const now = Date.now();\n    const userAttempts = this.attempts.get(key) || [];\n    \n    // Clean old attempts\n    const recentAttempts = userAttempts.filter(\n      timestamp => now - timestamp < this.windowMs\n    );\n    \n    if (recentAttempts.length >= this.maxAttempts) {\n      const oldestAttempt = recentAttempts[0];\n      const timeToWait = Math.ceil((this.windowMs - (now - oldestAttempt)) / 1000);\n      return {\n        allowed: false,\n        timeToWait,\n        message: `Too many attempts. Please wait ${timeToWait} seconds.`\n      };\n    }\n    \n    // Add current attempt\n    recentAttempts.push(now);\n    this.attempts.set(key, recentAttempts);\n    \n    return { allowed: true };\n  }\n  \n  reset(key) {\n    this.attempts.delete(key);\n  }\n}\n\n// Export a singleton rate limiter instance\nexport const formSubmissionLimiter = new RateLimiter(3, 60000); // 3 attempts per minute\n\n/**\n * Mask sensitive data for logging\n * @param {any} data - Data to mask\n * @returns {any} Masked data\n */\nexport const maskSensitiveData = (data) => {\n  if (!data) return data;\n  \n  const sensitiveFields = ['email', 'phone', 'phone_number', 'company_phone', 'email_w9_coi', 'ssn', 'password'];\n  \n  const mask = (obj) => {\n    if (typeof obj !== 'object' || obj === null) return obj;\n    \n    const masked = Array.isArray(obj) ? [...obj] : { ...obj };\n    \n    for (const [key, value] of Object.entries(masked)) {\n      const lowerKey = key.toLowerCase();\n      \n      if (sensitiveFields.some(field => lowerKey.includes(field))) {\n        if (typeof value === 'string' && value.length > 0) {\n          // Keep first and last character, mask the rest\n          masked[key] = value.length > 2\n            ? value[0] + '*'.repeat(Math.min(value.length - 2, 10)) + value[value.length - 1]\n            : '*'.repeat(value.length);\n        }\n      } else if (typeof value === 'object' && value !== null) {\n        masked[key] = mask(value);\n      }\n    }\n    \n    return masked;\n  };\n  \n  return mask(data);\n};\n\n/**\n * Validate file type and size\n * @param {File} file - File to validate\n * @param {Object} options - Validation options\n * @returns {Object} Validation result\n */\nexport const validateFile = (file, options = {}) => {\n  const {\n    maxSize = 2 * 1024 * 1024 * 1024, // 2GB default\n    allowedTypes = [],\n    allowedExtensions = []\n  } = options;\n  \n  const errors = [];\n  \n  // Check file size\n  if (file.size > maxSize) {\n    errors.push(`File size exceeds ${Math.round(maxSize / (1024 * 1024))}MB limit`);\n  }\n  \n  // Check file type\n  if (allowedTypes.length > 0 && !allowedTypes.includes(file.type)) {\n    errors.push('File type not allowed');\n  }\n  \n  // Check file extension\n  if (allowedExtensions.length > 0) {\n    const extension = '.' + file.name.split('.').pop().toLowerCase();\n    if (!allowedExtensions.includes(extension)) {\n      errors.push('File extension not allowed');\n    }\n  }\n  \n  // Check for potentially dangerous file names\n  const dangerousPatterns = [\n    /\\.exe$/i,\n    /\\.bat$/i,\n    /\\.cmd$/i,\n    /\\.com$/i,\n    /\\.pif$/i,\n    /\\.scr$/i,\n    /\\.vbs$/i,\n    /\\.js$/i,\n    /\\.jar$/i\n  ];\n  \n  if (dangerousPatterns.some(pattern => pattern.test(file.name))) {\n    errors.push('Potentially dangerous file type detected');\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\n/**\n * Check if running in iframe and validate parent origin\n * @param {string[]} allowedOrigins - List of allowed parent origins\n * @returns {boolean} True if allowed\n */\nexport const validateIframeOrigin = (allowedOrigins = []) => {\n  if (typeof window === 'undefined') return true;\n  \n  // Check if in iframe\n  const inIframe = window.self !== window.top;\n  \n  if (!inIframe) return true;\n  \n  // If in iframe, validate parent origin\n  try {\n    const parentOrigin = document.referrer ? new URL(document.referrer).origin : '';\n    \n    if (allowedOrigins.length === 0) {\n      // If no origins specified, allow all\n      return true;\n    }\n    \n    return allowedOrigins.includes(parentOrigin);\n  } catch (e) {\n    console.error('Error validating iframe origin:', e);\n    return false;\n  }\n};\n\nexport default {\n  sanitizeInput,\n  isValidEmail,\n  isValidPhone,\n  sanitizeFilename,\n  generateSecureId,\n  validateFormData,\n  formSubmissionLimiter,\n  maskSensitiveData,\n  validateFile,\n  validateIframeOrigin\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}