{"ast":null,"code":"/**\n * Security utilities for form validation and sanitization\n */\n\n/**\n * Sanitize input to prevent XSS attacks\n * @param {string} input - User input to sanitize\n * @returns {string} Sanitized input\n */\nexport const sanitizeInput = input => {\n  if (!input) return '';\n\n  // Convert to string if not already\n  const str = String(input);\n\n  // Remove script tags and dangerous HTML, but preserve spaces and normal text\n  let sanitized = str.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '').replace(/<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi, '').replace(/<object\\b[^<]*(?:(?!<\\/object>)<[^<]*)*<\\/object>/gi, '').replace(/<embed\\b[^<]*(?:(?!<\\/embed>)<[^<]*)*<\\/embed>/gi, '');\n\n  // Remove event handlers\n  sanitized = sanitized.replace(/on\\w+\\s*=\\s*[\"'][^\"']*[\"']/gi, '');\n  sanitized = sanitized.replace(/on\\w+\\s*=\\s*[^\\s>]*/gi, '');\n\n  // Escape dangerous characters but preserve spaces\n  sanitized = sanitized.replace(/[<>]/g, match => {\n    const escapeMap = {\n      '<': '&lt;',\n      '>': '&gt;'\n    };\n    return escapeMap[match];\n  });\n\n  // Preserve spaces but trim start and end\n  return sanitized.trim();\n};\n\n/**\n * Validate email format\n * @param {string} email - Email to validate\n * @returns {boolean} True if valid\n */\nexport const isValidEmail = email => {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n  return emailRegex.test(email);\n};\n\n/**\n * Validate phone number format (US)\n * @param {string} phone - Phone number to validate\n * @returns {boolean} True if valid\n */\nexport const isValidPhone = phone => {\n  // Remove all formatting and +1 country code for validation\n  let cleaned = phone.replace(/\\D/g, '');\n  // Remove leading 1 if present (from +1 country code)\n  if (cleaned.length === 11 && cleaned.startsWith('1')) {\n    cleaned = cleaned.substring(1);\n  }\n  // Should be exactly 10 digits after removing country code\n  return cleaned.length === 10;\n};\n\n/**\n * Sanitize file path to prevent directory traversal\n * @param {string} filename - File name to sanitize\n * @returns {string} Sanitized filename\n */\nexport const sanitizeFilename = filename => {\n  if (!filename) return '';\n\n  // Remove path traversal attempts\n  return filename.replace(/\\.\\./g, '').replace(/[\\/\\\\]/g, '_').replace(/^\\.+/, '').replace(/[^a-zA-Z0-9.\\-_]/g, '_').substring(0, 255); // Limit filename length\n};\n\n/**\n * Generate cryptographically secure random ID\n * @param {number} length - Length of ID (default 16)\n * @returns {string} Random ID\n */\nexport const generateSecureId = (length = 16) => {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  const array = new Uint8Array(length);\n  if (typeof window !== 'undefined' && window.crypto) {\n    window.crypto.getRandomValues(array);\n  } else {\n    // Fallback for Node.js environment\n    for (let i = 0; i < length; i++) {\n      array[i] = Math.floor(Math.random() * 256);\n    }\n  }\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars[array[i] % chars.length];\n  }\n  return result;\n};\n\n/**\n * Validate form data against injection attacks\n * @param {object} data - Form data to validate\n * @returns {object} Validation result\n */\nexport const validateFormData = data => {\n  const errors = {};\n  const sqlInjectionPattern = /(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION|WHERE|FROM|ORDER BY|GROUP BY|HAVING)\\b|--|\\/\\*|\\*\\/|xp_|sp_|<script|javascript:|onerror=|onload=)/gi;\n  for (const [key, value] of Object.entries(data)) {\n    if (typeof value === 'string') {\n      // Check for SQL injection patterns\n      if (sqlInjectionPattern.test(value)) {\n        errors[key] = 'Invalid characters detected';\n      }\n\n      // Check for excessive length (potential DoS)\n      if (value.length > 10000) {\n        errors[key] = 'Input too long';\n      }\n    }\n  }\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\n\n/**\n * Rate limiting tracker (client-side)\n */\nclass RateLimiter {\n  constructor(maxAttempts = 5, windowMs = 60000) {\n    this.attempts = new Map();\n    this.maxAttempts = maxAttempts;\n    this.windowMs = windowMs;\n  }\n  check(key) {\n    const now = Date.now();\n    const userAttempts = this.attempts.get(key) || [];\n\n    // Clean old attempts\n    const recentAttempts = userAttempts.filter(timestamp => now - timestamp < this.windowMs);\n    if (recentAttempts.length >= this.maxAttempts) {\n      const oldestAttempt = recentAttempts[0];\n      const timeToWait = Math.ceil((this.windowMs - (now - oldestAttempt)) / 1000);\n      return {\n        allowed: false,\n        timeToWait,\n        message: `Too many attempts. Please wait ${timeToWait} seconds.`\n      };\n    }\n\n    // Add current attempt\n    recentAttempts.push(now);\n    this.attempts.set(key, recentAttempts);\n    return {\n      allowed: true\n    };\n  }\n  reset(key) {\n    this.attempts.delete(key);\n  }\n}\n\n// Export a singleton rate limiter instance\nexport const formSubmissionLimiter = new RateLimiter(3, 60000); // 3 attempts per minute\n\n/**\n * Mask sensitive data for logging\n * @param {any} data - Data to mask\n * @returns {any} Masked data\n */\nexport const maskSensitiveData = data => {\n  if (!data) return data;\n  const sensitiveFields = ['email', 'phone', 'phone_number', 'company_phone', 'email_w9_coi', 'ssn', 'password'];\n  const mask = obj => {\n    if (typeof obj !== 'object' || obj === null) return obj;\n    const masked = Array.isArray(obj) ? [...obj] : {\n      ...obj\n    };\n    for (const [key, value] of Object.entries(masked)) {\n      const lowerKey = key.toLowerCase();\n      if (sensitiveFields.some(field => lowerKey.includes(field))) {\n        if (typeof value === 'string' && value.length > 0) {\n          // Keep first and last character, mask the rest\n          masked[key] = value.length > 2 ? value[0] + '*'.repeat(Math.min(value.length - 2, 10)) + value[value.length - 1] : '*'.repeat(value.length);\n        }\n      } else if (typeof value === 'object' && value !== null) {\n        masked[key] = mask(value);\n      }\n    }\n    return masked;\n  };\n  return mask(data);\n};\n\n/**\n * Validate file type and size\n * @param {File} file - File to validate\n * @param {Object} options - Validation options\n * @returns {Object} Validation result\n */\nexport const validateFile = (file, options = {}) => {\n  const {\n    maxSize = 2 * 1024 * 1024 * 1024,\n    // 2GB default\n    allowedTypes = [],\n    allowedExtensions = []\n  } = options;\n  const errors = [];\n\n  // Check file size\n  if (file.size > maxSize) {\n    errors.push(`File size exceeds ${Math.round(maxSize / (1024 * 1024))}MB limit`);\n  }\n\n  // Check file type\n  if (allowedTypes.length > 0 && !allowedTypes.includes(file.type)) {\n    errors.push('File type not allowed');\n  }\n\n  // Check file extension\n  if (allowedExtensions.length > 0) {\n    const extension = '.' + file.name.split('.').pop().toLowerCase();\n    if (!allowedExtensions.includes(extension)) {\n      errors.push('File extension not allowed');\n    }\n  }\n\n  // Check for potentially dangerous file names\n  const dangerousPatterns = [/\\.exe$/i, /\\.bat$/i, /\\.cmd$/i, /\\.com$/i, /\\.pif$/i, /\\.scr$/i, /\\.vbs$/i, /\\.js$/i, /\\.jar$/i];\n  if (dangerousPatterns.some(pattern => pattern.test(file.name))) {\n    errors.push('Potentially dangerous file type detected');\n  }\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\n/**\n * Check if running in iframe and validate parent origin\n * @param {string[]} allowedOrigins - List of allowed parent origins\n * @returns {boolean} True if allowed\n */\nexport const validateIframeOrigin = (allowedOrigins = []) => {\n  if (typeof window === 'undefined') return true;\n\n  // Check if in iframe\n  const inIframe = window.self !== window.top;\n  if (!inIframe) return true;\n\n  // If in iframe, validate parent origin\n  try {\n    const parentOrigin = document.referrer ? new URL(document.referrer).origin : '';\n    if (allowedOrigins.length === 0) {\n      // If no origins specified, allow all\n      return true;\n    }\n    return allowedOrigins.includes(parentOrigin);\n  } catch (e) {\n    console.error('Error validating iframe origin:', e);\n    return false;\n  }\n};\nexport default {\n  sanitizeInput,\n  isValidEmail,\n  isValidPhone,\n  sanitizeFilename,\n  generateSecureId,\n  validateFormData,\n  formSubmissionLimiter,\n  maskSensitiveData,\n  validateFile,\n  validateIframeOrigin\n};","map":{"version":3,"names":["sanitizeInput","input","str","String","sanitized","replace","match","escapeMap","trim","isValidEmail","email","emailRegex","test","isValidPhone","phone","cleaned","length","startsWith","substring","sanitizeFilename","filename","generateSecureId","chars","array","Uint8Array","window","crypto","getRandomValues","i","Math","floor","random","result","validateFormData","data","errors","sqlInjectionPattern","key","value","Object","entries","isValid","keys","RateLimiter","constructor","maxAttempts","windowMs","attempts","Map","check","now","Date","userAttempts","get","recentAttempts","filter","timestamp","oldestAttempt","timeToWait","ceil","allowed","message","push","set","reset","delete","formSubmissionLimiter","maskSensitiveData","sensitiveFields","mask","obj","masked","Array","isArray","lowerKey","toLowerCase","some","field","includes","repeat","min","validateFile","file","options","maxSize","allowedTypes","allowedExtensions","size","round","type","extension","name","split","pop","dangerousPatterns","pattern","validateIframeOrigin","allowedOrigins","inIframe","self","top","parentOrigin","document","referrer","URL","origin","e","console","error"],"sources":["/Users/adambower/Dev/ab-civil-website-preview/src/shared/utils/security.js"],"sourcesContent":["/**\n * Security utilities for form validation and sanitization\n */\n\n/**\n * Sanitize input to prevent XSS attacks\n * @param {string} input - User input to sanitize\n * @returns {string} Sanitized input\n */\nexport const sanitizeInput = (input) => {\n  if (!input) return '';\n  \n  // Convert to string if not already\n  const str = String(input);\n  \n  // Remove script tags and dangerous HTML, but preserve spaces and normal text\n  let sanitized = str\n    .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '')\n    .replace(/<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi, '')\n    .replace(/<object\\b[^<]*(?:(?!<\\/object>)<[^<]*)*<\\/object>/gi, '')\n    .replace(/<embed\\b[^<]*(?:(?!<\\/embed>)<[^<]*)*<\\/embed>/gi, '');\n  \n  // Remove event handlers\n  sanitized = sanitized.replace(/on\\w+\\s*=\\s*[\"'][^\"']*[\"']/gi, '');\n  sanitized = sanitized.replace(/on\\w+\\s*=\\s*[^\\s>]*/gi, '');\n  \n  // Escape dangerous characters but preserve spaces\n  sanitized = sanitized.replace(/[<>]/g, (match) => {\n    const escapeMap = {\n      '<': '&lt;',\n      '>': '&gt;'\n    };\n    return escapeMap[match];\n  });\n  \n  // Preserve spaces but trim start and end\n  return sanitized.trim();\n};\n\n/**\n * Validate email format\n * @param {string} email - Email to validate\n * @returns {boolean} True if valid\n */\nexport const isValidEmail = (email) => {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n  return emailRegex.test(email);\n};\n\n/**\n * Validate phone number format (US)\n * @param {string} phone - Phone number to validate\n * @returns {boolean} True if valid\n */\nexport const isValidPhone = (phone) => {\n  // Remove all formatting and +1 country code for validation\n  let cleaned = phone.replace(/\\D/g, '');\n  // Remove leading 1 if present (from +1 country code)\n  if (cleaned.length === 11 && cleaned.startsWith('1')) {\n    cleaned = cleaned.substring(1);\n  }\n  // Should be exactly 10 digits after removing country code\n  return cleaned.length === 10;\n};\n\n/**\n * Sanitize file path to prevent directory traversal\n * @param {string} filename - File name to sanitize\n * @returns {string} Sanitized filename\n */\nexport const sanitizeFilename = (filename) => {\n  if (!filename) return '';\n  \n  // Remove path traversal attempts\n  return filename\n    .replace(/\\.\\./g, '')\n    .replace(/[\\/\\\\]/g, '_')\n    .replace(/^\\.+/, '')\n    .replace(/[^a-zA-Z0-9.\\-_]/g, '_')\n    .substring(0, 255); // Limit filename length\n};\n\n/**\n * Generate cryptographically secure random ID\n * @param {number} length - Length of ID (default 16)\n * @returns {string} Random ID\n */\nexport const generateSecureId = (length = 16) => {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  const array = new Uint8Array(length);\n  \n  if (typeof window !== 'undefined' && window.crypto) {\n    window.crypto.getRandomValues(array);\n  } else {\n    // Fallback for Node.js environment\n    for (let i = 0; i < length; i++) {\n      array[i] = Math.floor(Math.random() * 256);\n    }\n  }\n  \n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars[array[i] % chars.length];\n  }\n  \n  return result;\n};\n\n/**\n * Validate form data against injection attacks\n * @param {object} data - Form data to validate\n * @returns {object} Validation result\n */\nexport const validateFormData = (data) => {\n  const errors = {};\n  const sqlInjectionPattern = /(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION|WHERE|FROM|ORDER BY|GROUP BY|HAVING)\\b|--|\\/\\*|\\*\\/|xp_|sp_|<script|javascript:|onerror=|onload=)/gi;\n  \n  for (const [key, value] of Object.entries(data)) {\n    if (typeof value === 'string') {\n      // Check for SQL injection patterns\n      if (sqlInjectionPattern.test(value)) {\n        errors[key] = 'Invalid characters detected';\n      }\n      \n      // Check for excessive length (potential DoS)\n      if (value.length > 10000) {\n        errors[key] = 'Input too long';\n      }\n    }\n  }\n  \n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\n\n/**\n * Rate limiting tracker (client-side)\n */\nclass RateLimiter {\n  constructor(maxAttempts = 5, windowMs = 60000) {\n    this.attempts = new Map();\n    this.maxAttempts = maxAttempts;\n    this.windowMs = windowMs;\n  }\n  \n  check(key) {\n    const now = Date.now();\n    const userAttempts = this.attempts.get(key) || [];\n    \n    // Clean old attempts\n    const recentAttempts = userAttempts.filter(\n      timestamp => now - timestamp < this.windowMs\n    );\n    \n    if (recentAttempts.length >= this.maxAttempts) {\n      const oldestAttempt = recentAttempts[0];\n      const timeToWait = Math.ceil((this.windowMs - (now - oldestAttempt)) / 1000);\n      return {\n        allowed: false,\n        timeToWait,\n        message: `Too many attempts. Please wait ${timeToWait} seconds.`\n      };\n    }\n    \n    // Add current attempt\n    recentAttempts.push(now);\n    this.attempts.set(key, recentAttempts);\n    \n    return { allowed: true };\n  }\n  \n  reset(key) {\n    this.attempts.delete(key);\n  }\n}\n\n// Export a singleton rate limiter instance\nexport const formSubmissionLimiter = new RateLimiter(3, 60000); // 3 attempts per minute\n\n/**\n * Mask sensitive data for logging\n * @param {any} data - Data to mask\n * @returns {any} Masked data\n */\nexport const maskSensitiveData = (data) => {\n  if (!data) return data;\n  \n  const sensitiveFields = ['email', 'phone', 'phone_number', 'company_phone', 'email_w9_coi', 'ssn', 'password'];\n  \n  const mask = (obj) => {\n    if (typeof obj !== 'object' || obj === null) return obj;\n    \n    const masked = Array.isArray(obj) ? [...obj] : { ...obj };\n    \n    for (const [key, value] of Object.entries(masked)) {\n      const lowerKey = key.toLowerCase();\n      \n      if (sensitiveFields.some(field => lowerKey.includes(field))) {\n        if (typeof value === 'string' && value.length > 0) {\n          // Keep first and last character, mask the rest\n          masked[key] = value.length > 2\n            ? value[0] + '*'.repeat(Math.min(value.length - 2, 10)) + value[value.length - 1]\n            : '*'.repeat(value.length);\n        }\n      } else if (typeof value === 'object' && value !== null) {\n        masked[key] = mask(value);\n      }\n    }\n    \n    return masked;\n  };\n  \n  return mask(data);\n};\n\n/**\n * Validate file type and size\n * @param {File} file - File to validate\n * @param {Object} options - Validation options\n * @returns {Object} Validation result\n */\nexport const validateFile = (file, options = {}) => {\n  const {\n    maxSize = 2 * 1024 * 1024 * 1024, // 2GB default\n    allowedTypes = [],\n    allowedExtensions = []\n  } = options;\n  \n  const errors = [];\n  \n  // Check file size\n  if (file.size > maxSize) {\n    errors.push(`File size exceeds ${Math.round(maxSize / (1024 * 1024))}MB limit`);\n  }\n  \n  // Check file type\n  if (allowedTypes.length > 0 && !allowedTypes.includes(file.type)) {\n    errors.push('File type not allowed');\n  }\n  \n  // Check file extension\n  if (allowedExtensions.length > 0) {\n    const extension = '.' + file.name.split('.').pop().toLowerCase();\n    if (!allowedExtensions.includes(extension)) {\n      errors.push('File extension not allowed');\n    }\n  }\n  \n  // Check for potentially dangerous file names\n  const dangerousPatterns = [\n    /\\.exe$/i,\n    /\\.bat$/i,\n    /\\.cmd$/i,\n    /\\.com$/i,\n    /\\.pif$/i,\n    /\\.scr$/i,\n    /\\.vbs$/i,\n    /\\.js$/i,\n    /\\.jar$/i\n  ];\n  \n  if (dangerousPatterns.some(pattern => pattern.test(file.name))) {\n    errors.push('Potentially dangerous file type detected');\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\n/**\n * Check if running in iframe and validate parent origin\n * @param {string[]} allowedOrigins - List of allowed parent origins\n * @returns {boolean} True if allowed\n */\nexport const validateIframeOrigin = (allowedOrigins = []) => {\n  if (typeof window === 'undefined') return true;\n  \n  // Check if in iframe\n  const inIframe = window.self !== window.top;\n  \n  if (!inIframe) return true;\n  \n  // If in iframe, validate parent origin\n  try {\n    const parentOrigin = document.referrer ? new URL(document.referrer).origin : '';\n    \n    if (allowedOrigins.length === 0) {\n      // If no origins specified, allow all\n      return true;\n    }\n    \n    return allowedOrigins.includes(parentOrigin);\n  } catch (e) {\n    console.error('Error validating iframe origin:', e);\n    return false;\n  }\n};\n\nexport default {\n  sanitizeInput,\n  isValidEmail,\n  isValidPhone,\n  sanitizeFilename,\n  generateSecureId,\n  validateFormData,\n  formSubmissionLimiter,\n  maskSensitiveData,\n  validateFile,\n  validateIframeOrigin\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}