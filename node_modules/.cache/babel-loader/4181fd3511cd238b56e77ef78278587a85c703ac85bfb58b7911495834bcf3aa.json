{"ast":null,"code":"import _objectSpread from\"/Users/adambower/Dev/ab-civil-website-preview/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useRef,useEffect}from'react';import SupabaseStorageService from'../../services/supabaseStorageService';import'./FileUpload.css';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const FileUploadWithFolders=_ref=>{var _selectedFiles$find;let{files=[],onFilesChange,disabled=false,maxFiles=100,// Increased default for folder uploads\nformType='service-request',// New prop for upload path\ncompanyName='Unknown Company',// New prop for upload path\nprojectName='Unknown Project',// New prop for upload path\nuserId=null// Optional user ID for RLS policies\n}=_ref;const[selectedFiles,setSelectedFiles]=useState(files);const[errors,setErrors]=useState([]);const[dragActive,setDragActive]=useState(false);const fileInputRef=useRef(null);const folderInputRef=useRef(null);const[folderStructure,setFolderStructure]=useState({});const[uploadingFiles,setUploadingFiles]=useState(new Set());// Track uploading files\nconst[uploadingPaths,setUploadingPaths]=useState({});// Track file paths being uploaded for deletion\nconst[showDeleteConfirm,setShowDeleteConfirm]=useState(null);// Track which file to confirm deletion\nconst[retryingFiles,setRetryingFiles]=useState(new Set());// Track files being retried\nconst[uploadProgress,setUploadProgress]=useState({});// Track upload progress for each file\nconst[uploadControllers,setUploadControllers]=useState({});// Track AbortControllers for cancellation\nconst[sessionId]=useState(()=>crypto.randomUUID());// Generate unique session ID for this form instance\n// Update local state when props change\nuseEffect(()=>{setSelectedFiles(files);},[files]);// Handle drag events\nconst handleDrag=e=>{e.preventDefault();e.stopPropagation();if(e.type===\"dragenter\"||e.type===\"dragover\"){setDragActive(true);}else if(e.type===\"dragleave\"){setDragActive(false);}};// Handle drop\nconst handleDrop=async e=>{e.preventDefault();e.stopPropagation();setDragActive(false);if(disabled)return;const items=e.dataTransfer.items;const files=[];// Check if we have items (could be folders)\nif(items){for(let i=0;i<items.length;i++){const item=items[i];if(item.kind==='file'){const entry=item.webkitGetAsEntry();if(entry){if(entry.isDirectory){// Handle folder drop\nconst folderFiles=await readDirectory(entry);files.push(...folderFiles);}else{// Handle file drop\nconst file=item.getAsFile();if(file){files.push({file,relativePath:file.name});}}}}}}if(files.length>0){handleFiles(files);}};// Recursively read directory contents\nconst readDirectory=async function(directoryEntry){let path=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';const files=[];const reader=directoryEntry.createReader();return new Promise(resolve=>{const readEntries=()=>{reader.readEntries(async entries=>{if(entries.length===0){resolve(files);}else{for(const entry of entries){const entryPath=path?\"\".concat(path,\"/\").concat(entry.name):entry.name;if(entry.isDirectory){const subFiles=await readDirectory(entry,entryPath);files.push(...subFiles);}else{const file=await new Promise(resolveFile=>{entry.file(file=>{resolveFile({file,relativePath:\"\".concat(directoryEntry.name,\"/\").concat(entryPath)});});});files.push(file);}}readEntries();// Continue reading\n}});};readEntries();});};// Handle file selection\nconst handleFileSelect=e=>{const fileList=e.target.files;if(fileList&&fileList.length>0){const filesArray=Array.from(fileList).map(file=>({file,relativePath:file.webkitRelativePath||file.name}));handleFiles(filesArray);}};// Handle folder selection\nconst handleFolderSelect=e=>{const fileList=e.target.files;if(fileList&&fileList.length>0){const filesArray=Array.from(fileList).map(file=>({file,relativePath:file.webkitRelativePath||file.name}));handleFiles(filesArray);}};// Process selected files and immediately upload to Supabase\nconst handleFiles=async newFiles=>{// Check max files limit\nif(selectedFiles.length+newFiles.length>maxFiles){setErrors([\"Maximum \".concat(maxFiles,\" files allowed\")]);return;}// Validate files first\nconst validationErrors=[];const validFilesToUpload=[];newFiles.forEach(_ref2=>{let{file,relativePath}=_ref2;const validation=SupabaseStorageService.validateFile(file);if(validation.isValid){validFilesToUpload.push({file,relativePath});}else{validationErrors.push(\"\".concat(file.name,\": \").concat(validation.error));}});if(validationErrors.length>0){setErrors(validationErrors);}if(validFilesToUpload.length===0)return;// Create all file data objects first\nconst newFileDataArray=validFilesToUpload.map(_ref3=>{let{file,relativePath}=_ref3;const fileId=crypto.randomUUID();return{id:fileId,file:file,filename:file.name,size:file.size,type:file.type,relativePath:relativePath,isLocal:true,isUploading:true,url:null,progress:0};});// Update state once with all new files\nconst updatedFiles=[...selectedFiles,...newFileDataArray];setSelectedFiles(updatedFiles);// Update folder structure once\nconst structure=_objectSpread({},folderStructure);newFileDataArray.forEach(fileData=>{const parts=fileData.relativePath.split('/');let current=structure;for(let i=0;i<parts.length-1;i++){if(!current[parts[i]]){current[parts[i]]={};}current=current[parts[i]];}current[parts[parts.length-1]]=fileData;});setFolderStructure(structure);// Update uploading trackers\nsetUploadingFiles(prev=>{const newSet=new Set(prev);newFileDataArray.forEach(fileData=>newSet.add(fileData.id));return newSet;});// Call parent callback once with all updated files\nif(onFilesChange){onFilesChange(updatedFiles);}// Start uploading files\nnewFileDataArray.forEach(async fileData=>{try{console.log('Starting upload for:',fileData.filename,'formType:',formType,'company:',companyName,'project:',projectName);// Generate the file path that will be used for upload (for deletion purposes)\nconst expectedPath=SupabaseStorageService.generateFilePath(formType,companyName,projectName,fileData.filename,fileData.relativePath,null,true// preserve exact folder structure\n);// Track the path for this file\nsetUploadingPaths(prev=>_objectSpread(_objectSpread({},prev),{},{[fileData.id]:expectedPath}));// Initialize progress\nsetUploadProgress(prev=>_objectSpread(_objectSpread({},prev),{},{[fileData.id]:0}));// Create AbortController for this upload\nconst controller=new AbortController();setUploadControllers(prev=>_objectSpread(_objectSpread({},prev),{},{[fileData.id]:controller}));// Add timeout to prevent hanging uploads\nconst uploadPromise=SupabaseStorageService.uploadFile(fileData.file,formType,companyName,projectName,progress=>{// Update progress state\nsetUploadProgress(prev=>_objectSpread(_objectSpread({},prev),{},{[fileData.id]:progress}));},fileData.relativePath,null,// uploadSessionId (deprecated)\ncontroller.signal,// AbortSignal for cancellation\nsessionId,// Session ID for security tracking\nuserId// User ID for RLS policies\n);const uploadResult=await uploadPromise;console.log('Upload completed for:',fileData.filename,uploadResult);// Upload successful - update file data\nsetSelectedFiles(prev=>{const updatedFiles=prev.map(f=>f.id===fileData.id?_objectSpread(_objectSpread({},f),{},{isUploading:false,url:uploadResult.url,path:uploadResult.path,uploadDate:uploadResult.uploadDate,session_id:uploadResult.session_id,// Include session_id for security\nuser_id:uploadResult.user_id,// Include user_id for RLS policies\nisLocal:false,uploadComplete:true}):f);// Defer callback to avoid the warning\nsetTimeout(()=>{if(onFilesChange){onFilesChange(updatedFiles);}},0);return updatedFiles;});// Remove from uploading trackers\nsetUploadingFiles(prev=>{const newSet=new Set(prev);newSet.delete(fileData.id);return newSet;});setUploadingPaths(prev=>{const newPaths=_objectSpread({},prev);delete newPaths[fileData.id];return newPaths;});// Keep progress at 100% for completed uploads\nsetUploadProgress(prev=>_objectSpread(_objectSpread({},prev),{},{[fileData.id]:100}));// Clear the AbortController\nsetUploadControllers(prev=>{const newControllers=_objectSpread({},prev);delete newControllers[fileData.id];return newControllers;});}catch(error){// Check if it was an abort error\nif(error.name==='AbortError'){console.log('Upload was cancelled:',fileData.filename);// Update file state to show cancellation\nsetSelectedFiles(prev=>{const cancelledFiles=prev.map(f=>f.id===fileData.id?_objectSpread(_objectSpread({},f),{},{isUploading:false,uploadError:'Cancelled'}):f);setTimeout(()=>{if(onFilesChange){onFilesChange(cancelledFiles);}},0);return cancelledFiles;});}else{console.error('Upload failed:',error);// Update file with error state\nsetSelectedFiles(prev=>{const errorFiles=prev.map(f=>f.id===fileData.id?_objectSpread(_objectSpread({},f),{},{isUploading:false,uploadError:error.message}):f);setTimeout(()=>{if(onFilesChange){onFilesChange(errorFiles);}},0);return errorFiles;});}// Remove from uploading trackers\nsetUploadingFiles(prev=>{const newSet=new Set(prev);newSet.delete(fileData.id);return newSet;});setUploadingPaths(prev=>{const newPaths=_objectSpread({},prev);delete newPaths[fileData.id];return newPaths;});setUploadProgress(prev=>{const newProgress=_objectSpread({},prev);delete newProgress[fileData.id];return newProgress;});// Clear the AbortController\nsetUploadControllers(prev=>{const newControllers=_objectSpread({},prev);delete newControllers[fileData.id];return newControllers;});if(error.name!=='AbortError'){setErrors(prev=>[...prev,\"Upload failed for \".concat(fileData.filename,\": \").concat(error.message)]);}}});setErrors(validationErrors);// Only show validation errors, upload errors are handled above\n};// Handle delete confirmation\nconst handleDeleteClick=fileId=>{const fileToRemove=selectedFiles.find(f=>f.id===fileId);if(!fileToRemove)return;// For uploading files, delete immediately (cancel)\nif(uploadingFiles.has(fileId)){removeFile(fileId);return;}// For uploaded files, show confirmation dialog\nif(!fileToRemove.isLocal||fileToRemove.url){setShowDeleteConfirm(fileId);}else{// For local files not yet uploaded, delete immediately\nremoveFile(fileId);}};// Confirm deletion\nconst confirmDelete=async fileId=>{setShowDeleteConfirm(null);await removeFile(fileId);};// Cancel deletion\nconst cancelDelete=()=>{setShowDeleteConfirm(null);};// Retry failed upload\nconst retryUpload=async fileId=>{const fileToRetry=selectedFiles.find(f=>f.id===fileId);if(!fileToRetry||!fileToRetry.uploadError||!fileToRetry.file)return;// Clear error and start retry\nsetSelectedFiles(prev=>prev.map(f=>f.id===fileId?_objectSpread(_objectSpread({},f),{},{uploadError:null,isUploading:true}):f));setRetryingFiles(prev=>new Set([...prev,fileId]));setUploadingFiles(prev=>new Set([...prev,fileId]));try{console.log('Retrying upload for:',fileToRetry.filename);// Generate the file path\nconst expectedPath=SupabaseStorageService.generateFilePath(formType,companyName,projectName,fileToRetry.filename,fileToRetry.relativePath,null,true// preserve exact folder structure\n);// Track the path for deletion\nsetUploadingPaths(prev=>_objectSpread(_objectSpread({},prev),{},{[fileId]:expectedPath}));// Initialize progress for retry\nsetUploadProgress(prev=>_objectSpread(_objectSpread({},prev),{},{[fileId]:0}));// Create new AbortController for retry\nconst controller=new AbortController();setUploadControllers(prev=>_objectSpread(_objectSpread({},prev),{},{[fileId]:controller}));const uploadResult=await SupabaseStorageService.uploadFile(fileToRetry.file,formType,companyName,projectName,progress=>{// Update progress state\nsetUploadProgress(prev=>_objectSpread(_objectSpread({},prev),{},{[fileId]:progress}));},fileToRetry.relativePath,null,// uploadSessionId (deprecated)\ncontroller.signal,// AbortSignal for cancellation\nsessionId,// Session ID for security tracking\nuserId// User ID for RLS policies\n);console.log('Retry completed for:',fileToRetry.filename,uploadResult);// Update with success\nsetSelectedFiles(prev=>{const retrySuccessFiles=prev.map(f=>f.id===fileId?_objectSpread(_objectSpread({},f),{},{isUploading:false,url:uploadResult.url,path:uploadResult.path,uploadDate:uploadResult.uploadDate,session_id:uploadResult.session_id,// Include session_id for security\nuser_id:uploadResult.user_id,// Include user_id for RLS policies\nisLocal:false,uploadComplete:true}):f);setTimeout(()=>{if(onFilesChange){onFilesChange(retrySuccessFiles);}},0);return retrySuccessFiles;});// Keep progress at 100% for completed retry\nsetUploadProgress(prev=>_objectSpread(_objectSpread({},prev),{},{[fileId]:100}));// Clear the AbortController\nsetUploadControllers(prev=>{const newControllers=_objectSpread({},prev);delete newControllers[fileId];return newControllers;});}catch(error){console.error('Retry failed:',error);setSelectedFiles(prev=>{const retryErrorFiles=prev.map(f=>f.id===fileId?_objectSpread(_objectSpread({},f),{},{isUploading:false,uploadError:error.message}):f);setTimeout(()=>{if(onFilesChange){onFilesChange(retryErrorFiles);}},0);return retryErrorFiles;});setErrors(prev=>[...prev,\"Retry failed for \".concat(fileToRetry.filename,\": \").concat(error.message)]);}finally{// Clean up tracking\nsetRetryingFiles(prev=>{const newSet=new Set(prev);newSet.delete(fileId);return newSet;});setUploadingFiles(prev=>{const newSet=new Set(prev);newSet.delete(fileId);return newSet;});setUploadingPaths(prev=>{const newPaths=_objectSpread({},prev);delete newPaths[fileId];return newPaths;});setUploadProgress(prev=>{const newProgress=_objectSpread({},prev);delete newProgress[fileId];return newProgress;});setUploadControllers(prev=>{const newControllers=_objectSpread({},prev);delete newControllers[fileId];return newControllers;});}};// Delete entire folder and all its files\nconst deleteFolder=async folderPath=>{// Find all files in this folder\nconst filesToDelete=selectedFiles.filter(file=>{// Check if file's relative path starts with the folder path\nconst fileFolderPath=file.relativePath?file.relativePath.substring(0,file.relativePath.lastIndexOf('/')):'';return fileFolderPath===folderPath||fileFolderPath.startsWith(folderPath+'/');});if(filesToDelete.length===0)return;// Confirm deletion if there are uploaded files\nconst hasUploadedFiles=filesToDelete.some(f=>f.uploadComplete||f.path);if(hasUploadedFiles){const confirmDeletion=window.confirm(\"Are you sure you want to delete the folder \\\"\".concat(folderPath.split('/').pop(),\"\\\" and all \").concat(filesToDelete.length,\" file(s) inside it?\\n\\nThis will permanently remove uploaded files from storage.\"));if(!confirmDeletion)return;}// Collect all file paths that need to be deleted from storage\nconst pathsToDelete=filesToDelete.filter(f=>f.path&&!f.isLocal).map(f=>f.path);// Delete files from Supabase storage in batch if there are any uploaded files\nif(pathsToDelete.length>0){try{console.log(\"Deleting \".concat(pathsToDelete.length,\" files from storage...\"));const deleteResult=await SupabaseStorageService.deleteMultipleFiles(pathsToDelete,sessionId);console.log(\"Deleted \".concat(deleteResult.successful,\" files from storage, \").concat(deleteResult.failed.length,\" failed\"));if(deleteResult.failed.length>0){setErrors(prev=>[...prev,\"Note: \".concat(deleteResult.failed.length,\" file(s) could not be removed from server.\")]);}}catch(error){console.error('Error deleting files from storage:',error);setErrors(prev=>[...prev,\"Note: Files could not be removed from server. They will be cleaned up automatically.\"]);}}// Remove all files from local state at once\nconst fileIdsToDelete=new Set(filesToDelete.map(f=>f.id));const newFiles=selectedFiles.filter(f=>!fileIdsToDelete.has(f.id));setSelectedFiles(newFiles);// Clear any upload tracking for these files\nsetUploadingFiles(prev=>{const newSet=new Set(prev);fileIdsToDelete.forEach(id=>newSet.delete(id));return newSet;});setUploadingPaths(prev=>{const newPaths=_objectSpread({},prev);fileIdsToDelete.forEach(id=>delete newPaths[id]);return newPaths;});setUploadProgress(prev=>{const newProgress=_objectSpread({},prev);fileIdsToDelete.forEach(id=>delete newProgress[id]);return newProgress;});setUploadControllers(prev=>{const newControllers=_objectSpread({},prev);fileIdsToDelete.forEach(id=>delete newControllers[id]);return newControllers;});// Rebuild folder structure\nconst structure={};newFiles.forEach(fileData=>{const parts=fileData.relativePath.split('/');let current=structure;for(let i=0;i<parts.length-1;i++){if(!current[parts[i]]){current[parts[i]]={};}current=current[parts[i]];}current[parts[parts.length-1]]=fileData;});setFolderStructure(structure);// Call parent callback\nif(onFilesChange){onFilesChange(newFiles);}console.log(\"Deleted folder \".concat(folderPath,\" with \").concat(filesToDelete.length,\" files\"));};// Remove file from list and delete from Supabase if uploaded\nconst removeFile=async function(fileId){let skipConfirmation=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;const fileToRemove=selectedFiles.find(f=>f.id===fileId);if(!fileToRemove)return;console.log('Removing file:',fileToRemove.filename,'ID:',fileId);// If file is uploading, cancel it using AbortController\nif(uploadingFiles.has(fileId)){// Abort the upload if controller exists\nconst controller=uploadControllers[fileId];if(controller){controller.abort();console.log('Aborted upload for:',fileToRemove.filename);}// Try to delete the partial upload from Supabase if it exists\nconst uploadPath=uploadingPaths[fileId];if(uploadPath){try{const deleteResult=await SupabaseStorageService.deleteFile(uploadPath,sessionId);if(deleteResult){console.log('Successfully deleted cancelled upload from Supabase:',uploadPath);}else{console.warn('Failed to delete cancelled upload from Supabase:',uploadPath);}}catch(error){console.warn('Could not delete cancelled upload (file might not exist yet):',uploadPath,error);// This is expected if the upload hadn't started or completed yet\n}}setUploadingFiles(prev=>{const newSet=new Set(prev);newSet.delete(fileId);return newSet;});setUploadingPaths(prev=>{const newPaths=_objectSpread({},prev);delete newPaths[fileId];return newPaths;});setUploadControllers(prev=>{const newControllers=_objectSpread({},prev);delete newControllers[fileId];return newControllers;});}// If file was successfully uploaded, delete it from Supabase\nif(fileToRemove.path&&!fileToRemove.isLocal&&!skipConfirmation){console.log('Attempting to delete uploaded file:',fileToRemove.path);// Only allow deletion if file has matching session_id (if session validation is enabled)\n// For now, we'll attempt deletion regardless to fix the immediate issue\nconst canDelete=!fileToRemove.session_id||fileToRemove.session_id===sessionId;if(canDelete){try{const deleteResult=await SupabaseStorageService.deleteFile(fileToRemove.path,sessionId);if(deleteResult){console.log('Successfully deleted file from Supabase:',fileToRemove.filename);setErrors(prev=>prev.filter(e=>!e.includes(fileToRemove.filename)));}else{console.error('Failed to delete file from Supabase:',fileToRemove.filename);// Show user-friendly error\nsetErrors(prev=>[...prev,\"Note: File \".concat(fileToRemove.filename,\" may still exist on server. It will be cleaned up automatically.\")]);}}catch(error){console.error('Error deleting file from Supabase:',error);// Continue with local removal even if Supabase delete fails\nsetErrors(prev=>[...prev,\"Note: Could not remove \".concat(fileToRemove.filename,\" from server. It will be cleaned up automatically.\")]);}}else{console.warn('Cannot delete file from different session:',fileToRemove.filename);setErrors(prev=>[...prev,\"Note: Cannot remove \".concat(fileToRemove.filename,\" - uploaded in different session.\")]);}}// Remove from local state\nconst newFiles=selectedFiles.filter(f=>f.id!==fileId);setSelectedFiles(newFiles);// Rebuild folder structure\nconst structure={};newFiles.forEach(fileData=>{const parts=fileData.relativePath.split('/');let current=structure;for(let i=0;i<parts.length-1;i++){if(!current[parts[i]]){current[parts[i]]={};}current=current[parts[i]];}current[parts[parts.length-1]]=fileData;});setFolderStructure(structure);// Call parent callback once\nif(onFilesChange){onFilesChange(newFiles);}};// Format file size\nconst formatFileSize=bytes=>{if(bytes===0)return'0 Bytes';const k=1024;const sizes=['Bytes','KB','MB','GB'];const i=Math.floor(Math.log(bytes)/Math.log(k));return Math.round(bytes/Math.pow(k,i)*100)/100+' '+sizes[i];};// Get file type info based on filename or MIME type\nconst getFileTypeInfo=file=>{const filename=file.name||file.filename||'';const mimeType=file.type||'';const ext=filename.split('.').pop().toLowerCase();// Check by file extension first\nif(['pdf'].includes(ext))return{label:'PDF',className:'file-type-pdf'};if(['jpg','jpeg','png','gif','webp','bmp'].includes(ext))return{label:'IMG',className:'file-type-image'};if(['zip','rar','7z'].includes(ext))return{label:'ZIP',className:'file-type-archive'};if(['dwg','dxf','dwf'].includes(ext))return{label:'CAD',className:'file-type-cad'};if(['xls','xlsx','xlsm'].includes(ext))return{label:'XLS',className:'file-type-excel'};if(['txt','csv'].includes(ext))return{label:'TXT',className:'file-type-text'};if(['rvt','rfa','ifc'].includes(ext))return{label:'BIM',className:'file-type-bim'};// Fall back to MIME type checking\nif(mimeType.includes('pdf'))return{label:'PDF',className:'file-type-pdf'};if(mimeType.includes('image'))return{label:'IMG',className:'file-type-image'};if(mimeType.includes('zip')||mimeType.includes('rar'))return{label:'ZIP',className:'file-type-archive'};if(mimeType.includes('sheet'))return{label:'XLS',className:'file-type-excel'};if(mimeType.includes('text'))return{label:'TXT',className:'file-type-text'};return{label:'FILE',className:'file-type-default'};};// Render folder structure\nconst renderFolderStructure=()=>{const renderLevel=function(obj){let level=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;return Object.entries(obj).map(_ref4=>{let[key,value]=_ref4;if(value.id){// It's a file\nconst fileType=getFileTypeInfo(value);return/*#__PURE__*/_jsxs(\"div\",{className:\"file-item compact\",style:{paddingLeft:\"\".concat(level*20,\"px\")},children:[/*#__PURE__*/_jsxs(\"div\",{className:\"file-info\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"file-type-badge \".concat(fileType.className),children:fileType.label}),/*#__PURE__*/_jsx(\"span\",{className:\"file-name\",children:value.filename}),/*#__PURE__*/_jsx(\"span\",{className:\"file-size\",children:formatFileSize(value.size)}),value.isUploading&&uploadProgress[value.id]<100&&/*#__PURE__*/_jsxs(\"div\",{className:\"file-upload-status\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"file-status uploading\",children:[\"Uploading... \",uploadProgress[value.id]?\"\".concat(Math.round(uploadProgress[value.id]),\"%\"):'0%']}),/*#__PURE__*/_jsx(\"div\",{className:\"progress-bar-container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"progress-bar-fill\",style:{width:\"\".concat(uploadProgress[value.id]||0,\"%\")}})})]}),(value.isUploading&&uploadProgress[value.id]===100||!value.isUploading&&!value.uploadError&&value.uploadComplete)&&/*#__PURE__*/_jsx(\"span\",{className:\"file-status uploaded\",children:\"\\u2713 Uploaded\"}),value.uploadError&&/*#__PURE__*/_jsxs(\"span\",{className:\"file-status error\",children:[\"Upload failed: \",value.uploadError,/*#__PURE__*/_jsxs(\"button\",{type:\"button\",className:\"retry-button\",onClick:()=>retryUpload(value.id),disabled:disabled||retryingFiles.has(value.id),title:\"Retry upload\",children:[retryingFiles.has(value.id)?'⟳':'↻',\" Retry\"]})]}),value.isLocal&&!value.isUploading&&!value.uploadComplete&&/*#__PURE__*/_jsx(\"span\",{className:\"file-status pending\",children:\"Pending upload\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"file-actions\",children:/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"file-remove compact \".concat(value.isUploading?'uploading':''),onClick:()=>handleDeleteClick(value.id),disabled:disabled,title:value.isUploading?\"Cancel upload\":\"Remove file\",children:\"\\u2715\"})})]},value.id);}else{// It's a folder\n// Get the full folder path\nconst folderPath=level===0?key:\"\".concat(key);// Recursively collect all files in this folder and subfolders\nconst getAllFilesInFolder=obj=>{let files=[];Object.values(obj).forEach(item=>{if(item&&item.id){// It's a file\nfiles.push(item);}else if(typeof item==='object'&&item!==null){// It's a subfolder, recurse\nfiles=files.concat(getAllFilesInFolder(item));}});return files;};const filesInFolder=getAllFilesInFolder(value);const allFilesUploaded=filesInFolder.every(f=>f.uploadComplete===true);// Check if any files are actually still uploading using the Set tracker\nconst someFilesUploading=filesInFolder.some(f=>uploadingFiles.has(f.id));return/*#__PURE__*/_jsxs(\"div\",{className:\"folder-group\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"folder-header\",style:{paddingLeft:\"\".concat(level*20,\"px\")},children:[/*#__PURE__*/_jsx(\"svg\",{className:\"folder-icon\",width:\"15\",height:\"15\",viewBox:\"0 0 16 16\",fill:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{d:\"M9.828 3h3.982a2 2 0 0 1 1.992 2.181l-.637 7A2 2 0 0 1 13.174 14H2.826a2 2 0 0 1-1.991-1.819l-.637-7a1.99 1.99 0 0 1 .342-1.31L.5 3a2 2 0 0 1 2-2h3.672a2 2 0 0 1 1.414.586l.828.828A2 2 0 0 0 9.828 3z\"})}),/*#__PURE__*/_jsx(\"span\",{className:\"folder-name\",children:key}),/*#__PURE__*/_jsxs(\"span\",{className:\"folder-file-count\",children:[\"(\",filesInFolder.length,\" files)\"]}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"folder-delete-btn\",onClick:()=>{// Build full path by traversing up the folder structure\nconst pathParts=[];let currentKey=key;pathParts.unshift(currentKey);// For nested folders, we'd need to track parent paths\n// For now, using the first file's path to determine folder path\nif(filesInFolder.length>0){const firstFile=filesInFolder[0];const fullPath=firstFile.relativePath.substring(0,firstFile.relativePath.lastIndexOf('/'));deleteFolder(fullPath);}},disabled:disabled||someFilesUploading,title:someFilesUploading?\"Cannot delete while uploading\":\"Delete entire folder\",style:{fontSize:'16px',fontWeight:'bold'},children:\"\\u2715\"})]}),renderLevel(value,level+1)]},key);}});};return renderLevel(folderStructure);};return/*#__PURE__*/_jsxs(\"div\",{className:\"file-upload-component\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"file-drop-zone \".concat(dragActive?'drag-active':'',\" \").concat(disabled?'disabled':'',\" \").concat(selectedFiles.length>0?'has-files':''),onDragEnter:handleDrag,onDragLeave:handleDrag,onDragOver:handleDrag,onDrop:handleDrop,children:[selectedFiles.length===0?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"upload-icon\",children:/*#__PURE__*/_jsxs(\"svg\",{width:\"48\",height:\"48\",viewBox:\"0 0 24 24\",fill:\"none\",stroke:\"#9ca3af\",strokeWidth:\"2\",children:[/*#__PURE__*/_jsx(\"path\",{d:\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"}),/*#__PURE__*/_jsx(\"polyline\",{points:\"17 8 12 3 7 8\"}),/*#__PURE__*/_jsx(\"line\",{x1:\"12\",y1:\"3\",x2:\"12\",y2:\"15\"})]})}),/*#__PURE__*/_jsx(\"p\",{className:\"upload-text\",children:\"Drag and drop files or folders here\"})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"files-in-dropzone\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"dropzone-header\",children:[/*#__PURE__*/_jsxs(\"h4\",{children:[\"Selected Files (\",selectedFiles.length,\"/\",maxFiles,\")\"]}),/*#__PURE__*/_jsx(\"p\",{className:\"upload-hint\",children:/*#__PURE__*/_jsx(\"small\",{children:\"Drag more files here or use the buttons below\"})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"dropzone-files-list\",children:Object.keys(folderStructure).length>0?renderFolderStructure():selectedFiles.map(file=>/*#__PURE__*/_jsxs(\"div\",{className:\"file-item compact\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"file-info\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"file-type-badge \".concat(getFileTypeInfo(file).className),children:getFileTypeInfo(file).label}),/*#__PURE__*/_jsx(\"span\",{className:\"file-name\",children:file.filename}),/*#__PURE__*/_jsx(\"span\",{className:\"file-size\",children:formatFileSize(file.size)}),file.isUploading&&uploadProgress[file.id]<100&&/*#__PURE__*/_jsxs(\"span\",{className:\"file-status uploading\",children:[Math.round(uploadProgress[file.id]||0),\"%\"]}),(file.isUploading&&uploadProgress[file.id]===100||!file.isUploading&&!file.uploadError&&file.uploadComplete)&&/*#__PURE__*/_jsx(\"span\",{className:\"file-status uploaded\",children:\"\\u2713\"}),file.uploadError&&/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"retry-button\",onClick:()=>retryUpload(file.id),disabled:disabled||retryingFiles.has(file.id),title:\"Retry upload\",children:\"\\u21BB\"})]}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"file-remove compact\",onClick:()=>handleDeleteClick(file.id),disabled:disabled,title:file.isUploading?\"Cancel\":\"Remove\",children:\"\\u2715\"})]},file.id))})]}),/*#__PURE__*/_jsx(\"input\",{ref:fileInputRef,type:\"file\",multiple:true,accept:\".pdf,.jpg,.jpeg,.png,.gif,.webp,.bmp,.tiff,.tif,.svg,.xls,.xlsx,.xlsm,.xlsb,.dwg,.dxf,.dwf,.dwfx,.txt,.csv,.zip,.rar,.7z,.ifc,.rvt,.rfa,.rte,.step,.stp,.stl,.iges,.igs,.sat,.3dm,.3ds,.obj,.dae,.skp\",onChange:handleFileSelect,disabled:disabled,style:{display:'none'}}),/*#__PURE__*/_jsx(\"input\",{ref:folderInputRef,type:\"file\",multiple:true,webkitdirectory:\"\",directory:\"\",onChange:handleFolderSelect,disabled:disabled,style:{display:'none'}}),/*#__PURE__*/_jsxs(\"div\",{className:\"upload-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn-upload\",onClick:()=>{var _fileInputRef$current;return(_fileInputRef$current=fileInputRef.current)===null||_fileInputRef$current===void 0?void 0:_fileInputRef$current.click();},disabled:disabled,children:\"Select Files\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn-upload btn-folder\",onClick:()=>{var _folderInputRef$curre;return(_folderInputRef$curre=folderInputRef.current)===null||_folderInputRef$curre===void 0?void 0:_folderInputRef$curre.click();},disabled:disabled,children:\"Select Folder\"})]})]}),errors.length>0&&/*#__PURE__*/_jsx(\"div\",{className:\"upload-errors\",children:errors.map((error,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"error-item\",children:[\"\\u26A0\\uFE0F \",error]},index))}),showDeleteConfirm&&/*#__PURE__*/_jsx(\"div\",{className:\"delete-confirmation-overlay\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"delete-confirmation-dialog\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Confirm File Deletion\"}),/*#__PURE__*/_jsx(\"p\",{children:(_selectedFiles$find=selectedFiles.find(f=>f.id===showDeleteConfirm))!==null&&_selectedFiles$find!==void 0&&_selectedFiles$find.uploadComplete?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"This file has been uploaded to our servers.\"}),/*#__PURE__*/_jsx(\"br\",{}),\"Are you sure you want to delete it? This will permanently remove the file from storage.\"]}):'Are you sure you want to remove this file? This action cannot be undone.'}),/*#__PURE__*/_jsxs(\"div\",{className:\"delete-confirmation-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn-cancel\",onClick:cancelDelete,children:\"Cancel\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn-delete\",onClick:()=>confirmDelete(showDeleteConfirm),children:\"Delete\"})]})]})})]});};export default FileUploadWithFolders;","map":{"version":3,"names":["React","useState","useRef","useEffect","SupabaseStorageService","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","FileUploadWithFolders","_ref","_selectedFiles$find","files","onFilesChange","disabled","maxFiles","formType","companyName","projectName","userId","selectedFiles","setSelectedFiles","errors","setErrors","dragActive","setDragActive","fileInputRef","folderInputRef","folderStructure","setFolderStructure","uploadingFiles","setUploadingFiles","Set","uploadingPaths","setUploadingPaths","showDeleteConfirm","setShowDeleteConfirm","retryingFiles","setRetryingFiles","uploadProgress","setUploadProgress","uploadControllers","setUploadControllers","sessionId","crypto","randomUUID","handleDrag","e","preventDefault","stopPropagation","type","handleDrop","items","dataTransfer","i","length","item","kind","entry","webkitGetAsEntry","isDirectory","folderFiles","readDirectory","push","file","getAsFile","relativePath","name","handleFiles","directoryEntry","path","arguments","undefined","reader","createReader","Promise","resolve","readEntries","entries","entryPath","concat","subFiles","resolveFile","handleFileSelect","fileList","target","filesArray","Array","from","map","webkitRelativePath","handleFolderSelect","newFiles","validationErrors","validFilesToUpload","forEach","_ref2","validation","validateFile","isValid","error","newFileDataArray","_ref3","fileId","id","filename","size","isLocal","isUploading","url","progress","updatedFiles","structure","_objectSpread","fileData","parts","split","current","prev","newSet","add","console","log","expectedPath","generateFilePath","controller","AbortController","uploadPromise","uploadFile","signal","uploadResult","f","uploadDate","session_id","user_id","uploadComplete","setTimeout","delete","newPaths","newControllers","cancelledFiles","uploadError","errorFiles","message","newProgress","handleDeleteClick","fileToRemove","find","has","removeFile","confirmDelete","cancelDelete","retryUpload","fileToRetry","retrySuccessFiles","retryErrorFiles","deleteFolder","folderPath","filesToDelete","filter","fileFolderPath","substring","lastIndexOf","startsWith","hasUploadedFiles","some","confirmDeletion","window","confirm","pop","pathsToDelete","deleteResult","deleteMultipleFiles","successful","failed","fileIdsToDelete","skipConfirmation","abort","uploadPath","deleteFile","warn","canDelete","includes","formatFileSize","bytes","k","sizes","Math","floor","round","pow","getFileTypeInfo","mimeType","ext","toLowerCase","label","className","renderFolderStructure","renderLevel","obj","level","Object","_ref4","key","value","fileType","style","paddingLeft","children","width","onClick","title","getAllFilesInFolder","values","filesInFolder","allFilesUploaded","every","someFilesUploading","height","viewBox","fill","d","pathParts","currentKey","unshift","firstFile","fullPath","fontSize","fontWeight","onDragEnter","onDragLeave","onDragOver","onDrop","stroke","strokeWidth","points","x1","y1","x2","y2","keys","ref","multiple","accept","onChange","display","webkitdirectory","directory","_fileInputRef$current","click","_folderInputRef$curre","index"],"sources":["/Users/adambower/Dev/ab-civil-website-preview/src/shared/components/FileUpload/FileUploadWithFolders.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport SupabaseStorageService from '../../services/supabaseStorageService';\nimport './FileUpload.css';\n\nconst FileUploadWithFolders = ({\n  files = [],\n  onFilesChange,\n  disabled = false,\n  maxFiles = 100,  // Increased default for folder uploads\n  formType = 'service-request',  // New prop for upload path\n  companyName = 'Unknown Company',  // New prop for upload path\n  projectName = 'Unknown Project',  // New prop for upload path\n  userId = null  // Optional user ID for RLS policies\n}) => {\n  const [selectedFiles, setSelectedFiles] = useState(files);\n  const [errors, setErrors] = useState([]);\n  const [dragActive, setDragActive] = useState(false);\n  const fileInputRef = useRef(null);\n  const folderInputRef = useRef(null);\n  const [folderStructure, setFolderStructure] = useState({});\n  const [uploadingFiles, setUploadingFiles] = useState(new Set()); // Track uploading files\n  const [uploadingPaths, setUploadingPaths] = useState({}); // Track file paths being uploaded for deletion\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(null); // Track which file to confirm deletion\n  const [retryingFiles, setRetryingFiles] = useState(new Set()); // Track files being retried\n  const [uploadProgress, setUploadProgress] = useState({}); // Track upload progress for each file\n  const [uploadControllers, setUploadControllers] = useState({}); // Track AbortControllers for cancellation\n  const [sessionId] = useState(() => crypto.randomUUID()); // Generate unique session ID for this form instance\n\n  // Update local state when props change\n  useEffect(() => {\n    setSelectedFiles(files);\n  }, [files]);\n\n  // Handle drag events\n  const handleDrag = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  };\n\n  // Handle drop\n  const handleDrop = async (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    if (disabled) return;\n    \n    const items = e.dataTransfer.items;\n    const files = [];\n    \n    // Check if we have items (could be folders)\n    if (items) {\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i];\n        if (item.kind === 'file') {\n          const entry = item.webkitGetAsEntry();\n          if (entry) {\n            if (entry.isDirectory) {\n              // Handle folder drop\n              const folderFiles = await readDirectory(entry);\n              files.push(...folderFiles);\n            } else {\n              // Handle file drop\n              const file = item.getAsFile();\n              if (file) {\n                files.push({ file, relativePath: file.name });\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    if (files.length > 0) {\n      handleFiles(files);\n    }\n  };\n\n  // Recursively read directory contents\n  const readDirectory = async (directoryEntry, path = '') => {\n    const files = [];\n    const reader = directoryEntry.createReader();\n    \n    return new Promise((resolve) => {\n      const readEntries = () => {\n        reader.readEntries(async (entries) => {\n          if (entries.length === 0) {\n            resolve(files);\n          } else {\n            for (const entry of entries) {\n              const entryPath = path ? `${path}/${entry.name}` : entry.name;\n              \n              if (entry.isDirectory) {\n                const subFiles = await readDirectory(entry, entryPath);\n                files.push(...subFiles);\n              } else {\n                const file = await new Promise((resolveFile) => {\n                  entry.file((file) => {\n                    resolveFile({ \n                      file, \n                      relativePath: `${directoryEntry.name}/${entryPath}` \n                    });\n                  });\n                });\n                files.push(file);\n              }\n            }\n            readEntries(); // Continue reading\n          }\n        });\n      };\n      readEntries();\n    });\n  };\n\n  // Handle file selection\n  const handleFileSelect = (e) => {\n    const fileList = e.target.files;\n    if (fileList && fileList.length > 0) {\n      const filesArray = Array.from(fileList).map(file => ({\n        file,\n        relativePath: file.webkitRelativePath || file.name\n      }));\n      handleFiles(filesArray);\n    }\n  };\n\n  // Handle folder selection\n  const handleFolderSelect = (e) => {\n    const fileList = e.target.files;\n    if (fileList && fileList.length > 0) {\n      const filesArray = Array.from(fileList).map(file => ({\n        file,\n        relativePath: file.webkitRelativePath || file.name\n      }));\n      handleFiles(filesArray);\n    }\n  };\n\n  // Process selected files and immediately upload to Supabase\n  const handleFiles = async (newFiles) => {\n    // Check max files limit\n    if (selectedFiles.length + newFiles.length > maxFiles) {\n      setErrors([`Maximum ${maxFiles} files allowed`]);\n      return;\n    }\n\n    // Validate files first\n    const validationErrors = [];\n    const validFilesToUpload = [];\n    \n    newFiles.forEach(({ file, relativePath }) => {\n      const validation = SupabaseStorageService.validateFile(file);\n      if (validation.isValid) {\n        validFilesToUpload.push({ file, relativePath });\n      } else {\n        validationErrors.push(`${file.name}: ${validation.error}`);\n      }\n    });\n\n    if (validationErrors.length > 0) {\n      setErrors(validationErrors);\n    }\n\n    if (validFilesToUpload.length === 0) return;\n\n    // Create all file data objects first\n    const newFileDataArray = validFilesToUpload.map(({ file, relativePath }) => {\n      const fileId = crypto.randomUUID();\n      \n      return {\n        id: fileId,\n        file: file,\n        filename: file.name,\n        size: file.size,\n        type: file.type,\n        relativePath: relativePath,\n        isLocal: true,\n        isUploading: true,\n        url: null,\n        progress: 0\n      };\n    });\n\n    // Update state once with all new files\n    const updatedFiles = [...selectedFiles, ...newFileDataArray];\n    setSelectedFiles(updatedFiles);\n    \n    // Update folder structure once\n    const structure = { ...folderStructure };\n    newFileDataArray.forEach(fileData => {\n      const parts = fileData.relativePath.split('/');\n      let current = structure;\n      for (let i = 0; i < parts.length - 1; i++) {\n        if (!current[parts[i]]) {\n          current[parts[i]] = {};\n        }\n        current = current[parts[i]];\n      }\n      current[parts[parts.length - 1]] = fileData;\n    });\n    setFolderStructure(structure);\n\n    // Update uploading trackers\n    setUploadingFiles(prev => {\n      const newSet = new Set(prev);\n      newFileDataArray.forEach(fileData => newSet.add(fileData.id));\n      return newSet;\n    });\n    \n\n    // Call parent callback once with all updated files\n    if (onFilesChange) {\n      onFilesChange(updatedFiles);\n    }\n\n    // Start uploading files\n    newFileDataArray.forEach(async (fileData) => {\n      try {\n        console.log('Starting upload for:', fileData.filename, 'formType:', formType, 'company:', companyName, 'project:', projectName);\n        \n        // Generate the file path that will be used for upload (for deletion purposes)\n        const expectedPath = SupabaseStorageService.generateFilePath(\n          formType, \n          companyName, \n          projectName, \n          fileData.filename, \n          fileData.relativePath,\n          null,\n          true // preserve exact folder structure\n        );\n        \n        // Track the path for this file\n        setUploadingPaths(prev => ({ ...prev, [fileData.id]: expectedPath }));\n        \n        // Initialize progress\n        setUploadProgress(prev => ({ ...prev, [fileData.id]: 0 }));\n        \n        // Create AbortController for this upload\n        const controller = new AbortController();\n        setUploadControllers(prev => ({ ...prev, [fileData.id]: controller }));\n        \n        // Add timeout to prevent hanging uploads\n        const uploadPromise = SupabaseStorageService.uploadFile(\n          fileData.file,\n          formType,\n          companyName,\n          projectName,\n          (progress) => {\n            // Update progress state\n            setUploadProgress(prev => ({ ...prev, [fileData.id]: progress }));\n          },\n          fileData.relativePath,\n          null, // uploadSessionId (deprecated)\n          controller.signal, // AbortSignal for cancellation\n          sessionId, // Session ID for security tracking\n          userId // User ID for RLS policies\n        );\n        \n        const uploadResult = await uploadPromise;\n        \n        console.log('Upload completed for:', fileData.filename, uploadResult);\n\n        // Upload successful - update file data\n        setSelectedFiles(prev => {\n          const updatedFiles = prev.map(f => \n            f.id === fileData.id ? { \n              ...f, \n              isUploading: false, \n              url: uploadResult.url,\n              path: uploadResult.path,\n              uploadDate: uploadResult.uploadDate,\n              session_id: uploadResult.session_id, // Include session_id for security\n              user_id: uploadResult.user_id, // Include user_id for RLS policies\n              isLocal: false,\n              uploadComplete: true\n            } : f\n          );\n          \n          // Defer callback to avoid the warning\n          setTimeout(() => {\n            if (onFilesChange) {\n              onFilesChange(updatedFiles);\n            }\n          }, 0);\n          \n          return updatedFiles;\n        })\n\n        // Remove from uploading trackers\n        setUploadingFiles(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(fileData.id);\n          return newSet;\n        });\n\n        setUploadingPaths(prev => {\n          const newPaths = { ...prev };\n          delete newPaths[fileData.id];\n          return newPaths;\n        });\n        \n        // Keep progress at 100% for completed uploads\n        setUploadProgress(prev => ({ ...prev, [fileData.id]: 100 }));\n        \n        // Clear the AbortController\n        setUploadControllers(prev => {\n          const newControllers = { ...prev };\n          delete newControllers[fileData.id];\n          return newControllers;\n        });\n\n      } catch (error) {\n        // Check if it was an abort error\n        if (error.name === 'AbortError') {\n          console.log('Upload was cancelled:', fileData.filename);\n          // Update file state to show cancellation\n          setSelectedFiles(prev => {\n            const cancelledFiles = prev.map(f => \n              f.id === fileData.id ? { ...f, isUploading: false, uploadError: 'Cancelled' } : f\n            );\n            \n            setTimeout(() => {\n              if (onFilesChange) {\n                onFilesChange(cancelledFiles);\n              }\n            }, 0);\n            \n            return cancelledFiles;\n          })\n        } else {\n          console.error('Upload failed:', error);\n          // Update file with error state\n          setSelectedFiles(prev => {\n            const errorFiles = prev.map(f => \n              f.id === fileData.id ? { ...f, isUploading: false, uploadError: error.message } : f\n            );\n            \n            setTimeout(() => {\n              if (onFilesChange) {\n                onFilesChange(errorFiles);\n              }\n            }, 0);\n            \n            return errorFiles;\n          })\n        }\n\n        // Remove from uploading trackers\n        setUploadingFiles(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(fileData.id);\n          return newSet;\n        });\n\n        setUploadingPaths(prev => {\n          const newPaths = { ...prev };\n          delete newPaths[fileData.id];\n          return newPaths;\n        });\n        \n        setUploadProgress(prev => {\n          const newProgress = { ...prev };\n          delete newProgress[fileData.id];\n          return newProgress;\n        });\n        \n        // Clear the AbortController\n        setUploadControllers(prev => {\n          const newControllers = { ...prev };\n          delete newControllers[fileData.id];\n          return newControllers;\n        });\n\n        if (error.name !== 'AbortError') {\n          setErrors(prev => [...prev, `Upload failed for ${fileData.filename}: ${error.message}`]);\n        }\n      }\n    });\n\n    setErrors(validationErrors); // Only show validation errors, upload errors are handled above\n  };\n\n  // Handle delete confirmation\n  const handleDeleteClick = (fileId) => {\n    const fileToRemove = selectedFiles.find(f => f.id === fileId);\n    if (!fileToRemove) return;\n    \n    // For uploading files, delete immediately (cancel)\n    if (uploadingFiles.has(fileId)) {\n      removeFile(fileId);\n      return;\n    }\n    \n    // For uploaded files, show confirmation dialog\n    if (!fileToRemove.isLocal || fileToRemove.url) {\n      setShowDeleteConfirm(fileId);\n    } else {\n      // For local files not yet uploaded, delete immediately\n      removeFile(fileId);\n    }\n  };\n\n  // Confirm deletion\n  const confirmDelete = async (fileId) => {\n    setShowDeleteConfirm(null);\n    await removeFile(fileId);\n  };\n\n  // Cancel deletion\n  const cancelDelete = () => {\n    setShowDeleteConfirm(null);\n  };\n\n  // Retry failed upload\n  const retryUpload = async (fileId) => {\n    const fileToRetry = selectedFiles.find(f => f.id === fileId);\n    if (!fileToRetry || !fileToRetry.uploadError || !fileToRetry.file) return;\n\n    // Clear error and start retry\n    setSelectedFiles(prev => prev.map(f => \n      f.id === fileId ? { ...f, uploadError: null, isUploading: true } : f\n    ));\n    \n    setRetryingFiles(prev => new Set([...prev, fileId]));\n    setUploadingFiles(prev => new Set([...prev, fileId]));\n\n    try {\n      console.log('Retrying upload for:', fileToRetry.filename);\n      \n      // Generate the file path\n      const expectedPath = SupabaseStorageService.generateFilePath(\n        formType, \n        companyName, \n        projectName, \n        fileToRetry.filename, \n        fileToRetry.relativePath,\n        null,\n        true // preserve exact folder structure\n      );\n      \n      // Track the path for deletion\n      setUploadingPaths(prev => ({ ...prev, [fileId]: expectedPath }));\n      \n      // Initialize progress for retry\n      setUploadProgress(prev => ({ ...prev, [fileId]: 0 }));\n      \n      // Create new AbortController for retry\n      const controller = new AbortController();\n      setUploadControllers(prev => ({ ...prev, [fileId]: controller }));\n      \n      const uploadResult = await SupabaseStorageService.uploadFile(\n        fileToRetry.file,\n        formType,\n        companyName,\n        projectName,\n        (progress) => {\n          // Update progress state\n          setUploadProgress(prev => ({ ...prev, [fileId]: progress }));\n        },\n        fileToRetry.relativePath,\n        null, // uploadSessionId (deprecated)\n        controller.signal, // AbortSignal for cancellation\n        sessionId, // Session ID for security tracking\n        userId // User ID for RLS policies\n      );\n\n      console.log('Retry completed for:', fileToRetry.filename, uploadResult);\n\n      // Update with success\n      setSelectedFiles(prev => {\n        const retrySuccessFiles = prev.map(f => \n          f.id === fileId ? { \n            ...f, \n            isUploading: false, \n            url: uploadResult.url,\n            path: uploadResult.path,\n            uploadDate: uploadResult.uploadDate,\n            session_id: uploadResult.session_id, // Include session_id for security\n            user_id: uploadResult.user_id, // Include user_id for RLS policies\n            isLocal: false,\n            uploadComplete: true\n          } : f\n        );\n        \n        setTimeout(() => {\n          if (onFilesChange) {\n            onFilesChange(retrySuccessFiles);\n          }\n        }, 0);\n        \n        return retrySuccessFiles;\n      })\n      \n      // Keep progress at 100% for completed retry\n      setUploadProgress(prev => ({ ...prev, [fileId]: 100 }));\n      \n      // Clear the AbortController\n      setUploadControllers(prev => {\n        const newControllers = { ...prev };\n        delete newControllers[fileId];\n        return newControllers;\n      });\n\n    } catch (error) {\n      console.error('Retry failed:', error);\n      \n      setSelectedFiles(prev => {\n        const retryErrorFiles = prev.map(f => \n          f.id === fileId ? { ...f, isUploading: false, uploadError: error.message } : f\n        );\n        \n        setTimeout(() => {\n          if (onFilesChange) {\n            onFilesChange(retryErrorFiles);\n          }\n        }, 0);\n        \n        return retryErrorFiles;\n      })\n\n      setErrors(prev => [...prev, `Retry failed for ${fileToRetry.filename}: ${error.message}`]);\n    } finally {\n      // Clean up tracking\n      setRetryingFiles(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(fileId);\n        return newSet;\n      });\n\n      setUploadingFiles(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(fileId);\n        return newSet;\n      });\n\n\n      setUploadingPaths(prev => {\n        const newPaths = { ...prev };\n        delete newPaths[fileId];\n        return newPaths;\n      });\n      \n      setUploadProgress(prev => {\n        const newProgress = { ...prev };\n        delete newProgress[fileId];\n        return newProgress;\n      });\n      \n      setUploadControllers(prev => {\n        const newControllers = { ...prev };\n        delete newControllers[fileId];\n        return newControllers;\n      });\n    }\n  };\n\n  // Delete entire folder and all its files\n  const deleteFolder = async (folderPath) => {\n    // Find all files in this folder\n    const filesToDelete = selectedFiles.filter(file => {\n      // Check if file's relative path starts with the folder path\n      const fileFolderPath = file.relativePath ? file.relativePath.substring(0, file.relativePath.lastIndexOf('/')) : '';\n      return fileFolderPath === folderPath || fileFolderPath.startsWith(folderPath + '/');\n    });\n    \n    if (filesToDelete.length === 0) return;\n    \n    // Confirm deletion if there are uploaded files\n    const hasUploadedFiles = filesToDelete.some(f => f.uploadComplete || f.path);\n    if (hasUploadedFiles) {\n      const confirmDeletion = window.confirm(\n        `Are you sure you want to delete the folder \"${folderPath.split('/').pop()}\" and all ${filesToDelete.length} file(s) inside it?\\n\\nThis will permanently remove uploaded files from storage.`\n      );\n      if (!confirmDeletion) return;\n    }\n    \n    // Collect all file paths that need to be deleted from storage\n    const pathsToDelete = filesToDelete\n      .filter(f => f.path && !f.isLocal)\n      .map(f => f.path);\n    \n    // Delete files from Supabase storage in batch if there are any uploaded files\n    if (pathsToDelete.length > 0) {\n      try {\n        console.log(`Deleting ${pathsToDelete.length} files from storage...`);\n        const deleteResult = await SupabaseStorageService.deleteMultipleFiles(pathsToDelete, sessionId);\n        console.log(`Deleted ${deleteResult.successful} files from storage, ${deleteResult.failed.length} failed`);\n        \n        if (deleteResult.failed.length > 0) {\n          setErrors(prev => [...prev, `Note: ${deleteResult.failed.length} file(s) could not be removed from server.`]);\n        }\n      } catch (error) {\n        console.error('Error deleting files from storage:', error);\n        setErrors(prev => [...prev, `Note: Files could not be removed from server. They will be cleaned up automatically.`]);\n      }\n    }\n    \n    // Remove all files from local state at once\n    const fileIdsToDelete = new Set(filesToDelete.map(f => f.id));\n    const newFiles = selectedFiles.filter(f => !fileIdsToDelete.has(f.id));\n    setSelectedFiles(newFiles);\n    \n    // Clear any upload tracking for these files\n    setUploadingFiles(prev => {\n      const newSet = new Set(prev);\n      fileIdsToDelete.forEach(id => newSet.delete(id));\n      return newSet;\n    });\n    \n    setUploadingPaths(prev => {\n      const newPaths = { ...prev };\n      fileIdsToDelete.forEach(id => delete newPaths[id]);\n      return newPaths;\n    });\n    \n    setUploadProgress(prev => {\n      const newProgress = { ...prev };\n      fileIdsToDelete.forEach(id => delete newProgress[id]);\n      return newProgress;\n    });\n    \n    setUploadControllers(prev => {\n      const newControllers = { ...prev };\n      fileIdsToDelete.forEach(id => delete newControllers[id]);\n      return newControllers;\n    });\n    \n    // Rebuild folder structure\n    const structure = {};\n    newFiles.forEach(fileData => {\n      const parts = fileData.relativePath.split('/');\n      let current = structure;\n      for (let i = 0; i < parts.length - 1; i++) {\n        if (!current[parts[i]]) {\n          current[parts[i]] = {};\n        }\n        current = current[parts[i]];\n      }\n      current[parts[parts.length - 1]] = fileData;\n    });\n    setFolderStructure(structure);\n    \n    // Call parent callback\n    if (onFilesChange) {\n      onFilesChange(newFiles);\n    }\n    \n    console.log(`Deleted folder ${folderPath} with ${filesToDelete.length} files`);\n  };\n  \n  // Remove file from list and delete from Supabase if uploaded\n  const removeFile = async (fileId, skipConfirmation = false) => {\n    const fileToRemove = selectedFiles.find(f => f.id === fileId);\n    \n    if (!fileToRemove) return;\n    \n    console.log('Removing file:', fileToRemove.filename, 'ID:', fileId);\n    \n    // If file is uploading, cancel it using AbortController\n    if (uploadingFiles.has(fileId)) {\n      // Abort the upload if controller exists\n      const controller = uploadControllers[fileId];\n      if (controller) {\n        controller.abort();\n        console.log('Aborted upload for:', fileToRemove.filename);\n      }\n      \n      // Try to delete the partial upload from Supabase if it exists\n      const uploadPath = uploadingPaths[fileId];\n      if (uploadPath) {\n        try {\n          const deleteResult = await SupabaseStorageService.deleteFile(uploadPath, sessionId);\n          if (deleteResult) {\n            console.log('Successfully deleted cancelled upload from Supabase:', uploadPath);\n          } else {\n            console.warn('Failed to delete cancelled upload from Supabase:', uploadPath);\n          }\n        } catch (error) {\n          console.warn('Could not delete cancelled upload (file might not exist yet):', uploadPath, error);\n          // This is expected if the upload hadn't started or completed yet\n        }\n      }\n      \n      setUploadingFiles(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(fileId);\n        return newSet;\n      });\n      \n      setUploadingPaths(prev => {\n        const newPaths = { ...prev };\n        delete newPaths[fileId];\n        return newPaths;\n      });\n      \n      setUploadControllers(prev => {\n        const newControllers = { ...prev };\n        delete newControllers[fileId];\n        return newControllers;\n      });\n    }\n    \n    // If file was successfully uploaded, delete it from Supabase\n    if (fileToRemove.path && !fileToRemove.isLocal && !skipConfirmation) {\n      console.log('Attempting to delete uploaded file:', fileToRemove.path);\n      \n      // Only allow deletion if file has matching session_id (if session validation is enabled)\n      // For now, we'll attempt deletion regardless to fix the immediate issue\n      const canDelete = !fileToRemove.session_id || fileToRemove.session_id === sessionId;\n      \n      if (canDelete) {\n        try {\n          const deleteResult = await SupabaseStorageService.deleteFile(fileToRemove.path, sessionId);\n          if (deleteResult) {\n            console.log('Successfully deleted file from Supabase:', fileToRemove.filename);\n            setErrors(prev => prev.filter(e => !e.includes(fileToRemove.filename)));\n          } else {\n            console.error('Failed to delete file from Supabase:', fileToRemove.filename);\n            // Show user-friendly error\n            setErrors(prev => [...prev, `Note: File ${fileToRemove.filename} may still exist on server. It will be cleaned up automatically.`]);\n          }\n        } catch (error) {\n          console.error('Error deleting file from Supabase:', error);\n          // Continue with local removal even if Supabase delete fails\n          setErrors(prev => [...prev, `Note: Could not remove ${fileToRemove.filename} from server. It will be cleaned up automatically.`]);\n        }\n      } else {\n        console.warn('Cannot delete file from different session:', fileToRemove.filename);\n        setErrors(prev => [...prev, `Note: Cannot remove ${fileToRemove.filename} - uploaded in different session.`]);\n      }\n    }\n    \n    // Remove from local state\n    const newFiles = selectedFiles.filter(f => f.id !== fileId);\n    setSelectedFiles(newFiles);\n    \n    // Rebuild folder structure\n    const structure = {};\n    newFiles.forEach(fileData => {\n      const parts = fileData.relativePath.split('/');\n      let current = structure;\n      for (let i = 0; i < parts.length - 1; i++) {\n        if (!current[parts[i]]) {\n          current[parts[i]] = {};\n        }\n        current = current[parts[i]];\n      }\n      current[parts[parts.length - 1]] = fileData;\n    });\n    setFolderStructure(structure);\n    \n    // Call parent callback once\n    if (onFilesChange) {\n      onFilesChange(newFiles);\n    }\n  };\n\n  // Format file size\n  const formatFileSize = (bytes) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];\n  };\n\n\n  // Get file type info based on filename or MIME type\n  const getFileTypeInfo = (file) => {\n    const filename = file.name || file.filename || '';\n    const mimeType = file.type || '';\n    const ext = filename.split('.').pop().toLowerCase();\n    \n    // Check by file extension first\n    if (['pdf'].includes(ext)) return { label: 'PDF', className: 'file-type-pdf' };\n    if (['jpg', 'jpeg', 'png', 'gif', 'webp', 'bmp'].includes(ext)) return { label: 'IMG', className: 'file-type-image' };\n    if (['zip', 'rar', '7z'].includes(ext)) return { label: 'ZIP', className: 'file-type-archive' };\n    if (['dwg', 'dxf', 'dwf'].includes(ext)) return { label: 'CAD', className: 'file-type-cad' };\n    if (['xls', 'xlsx', 'xlsm'].includes(ext)) return { label: 'XLS', className: 'file-type-excel' };\n    if (['txt', 'csv'].includes(ext)) return { label: 'TXT', className: 'file-type-text' };\n    if (['rvt', 'rfa', 'ifc'].includes(ext)) return { label: 'BIM', className: 'file-type-bim' };\n    \n    // Fall back to MIME type checking\n    if (mimeType.includes('pdf')) return { label: 'PDF', className: 'file-type-pdf' };\n    if (mimeType.includes('image')) return { label: 'IMG', className: 'file-type-image' };\n    if (mimeType.includes('zip') || mimeType.includes('rar')) return { label: 'ZIP', className: 'file-type-archive' };\n    if (mimeType.includes('sheet')) return { label: 'XLS', className: 'file-type-excel' };\n    if (mimeType.includes('text')) return { label: 'TXT', className: 'file-type-text' };\n    \n    return { label: 'FILE', className: 'file-type-default' };\n  };\n\n  // Render folder structure\n  const renderFolderStructure = () => {\n    const renderLevel = (obj, level = 0) => {\n      return Object.entries(obj).map(([key, value]) => {\n        if (value.id) {\n          // It's a file\n          const fileType = getFileTypeInfo(value);\n          return (\n            <div key={value.id} className=\"file-item compact\" style={{ paddingLeft: `${level * 20}px` }}>\n              <div className=\"file-info\">\n                <span className={`file-type-badge ${fileType.className}`}>\n                  {fileType.label}\n                </span>\n                <span className=\"file-name\">{value.filename}</span>\n                <span className=\"file-size\">{formatFileSize(value.size)}</span>\n                \n                {/* Upload status */}\n                {value.isUploading && uploadProgress[value.id] < 100 && (\n                  <div className=\"file-upload-status\">\n                    <span className=\"file-status uploading\">\n                      Uploading... {uploadProgress[value.id] ? `${Math.round(uploadProgress[value.id])}%` : '0%'}\n                    </span>\n                    <div className=\"progress-bar-container\">\n                      <div \n                        className=\"progress-bar-fill\" \n                        style={{ width: `${uploadProgress[value.id] || 0}%` }}\n                      />\n                    </div>\n                  </div>\n                )}\n                {((value.isUploading && uploadProgress[value.id] === 100) || (!value.isUploading && !value.uploadError && value.uploadComplete)) && (\n                  <span className=\"file-status uploaded\">✓ Uploaded</span>\n                )}\n                {value.uploadError && (\n                  <span className=\"file-status error\">\n                    Upload failed: {value.uploadError}\n                    <button\n                      type=\"button\"\n                      className=\"retry-button\"\n                      onClick={() => retryUpload(value.id)}\n                      disabled={disabled || retryingFiles.has(value.id)}\n                      title=\"Retry upload\"\n                    >\n                      {retryingFiles.has(value.id) ? '⟳' : '↻'} Retry\n                    </button>\n                  </span>\n                )}\n                {value.isLocal && !value.isUploading && !value.uploadComplete && (\n                  <span className=\"file-status pending\">Pending upload</span>\n                )}\n              </div>\n              \n              <div className=\"file-actions\">\n                <button\n                  type=\"button\"\n                  className={`file-remove compact ${value.isUploading ? 'uploading' : ''}`}\n                  onClick={() => handleDeleteClick(value.id)}\n                  disabled={disabled}\n                  title={value.isUploading ? \"Cancel upload\" : \"Remove file\"}\n                >\n                  ✕\n                </button>\n              </div>\n              \n            </div>\n          );\n        } else {\n          // It's a folder\n          // Get the full folder path\n          const folderPath = level === 0 ? key : `${key}`;\n          \n          // Recursively collect all files in this folder and subfolders\n          const getAllFilesInFolder = (obj) => {\n            let files = [];\n            Object.values(obj).forEach(item => {\n              if (item && item.id) {\n                // It's a file\n                files.push(item);\n              } else if (typeof item === 'object' && item !== null) {\n                // It's a subfolder, recurse\n                files = files.concat(getAllFilesInFolder(item));\n              }\n            });\n            return files;\n          };\n          \n          const filesInFolder = getAllFilesInFolder(value);\n          const allFilesUploaded = filesInFolder.every(f => f.uploadComplete === true);\n          // Check if any files are actually still uploading using the Set tracker\n          const someFilesUploading = filesInFolder.some(f => uploadingFiles.has(f.id));\n          \n\n          return (\n            <div key={key} className=\"folder-group\">\n              <div className=\"folder-header\" style={{ paddingLeft: `${level * 20}px` }}>\n                <svg \n                  className=\"folder-icon\"\n                  width=\"15\" \n                  height=\"15\" \n                  viewBox=\"0 0 16 16\" \n                  fill=\"currentColor\"\n                >\n                  <path d=\"M9.828 3h3.982a2 2 0 0 1 1.992 2.181l-.637 7A2 2 0 0 1 13.174 14H2.826a2 2 0 0 1-1.991-1.819l-.637-7a1.99 1.99 0 0 1 .342-1.31L.5 3a2 2 0 0 1 2-2h3.672a2 2 0 0 1 1.414.586l.828.828A2 2 0 0 0 9.828 3z\"/>\n                </svg>\n                <span className=\"folder-name\">{key}</span>\n                <span className=\"folder-file-count\">({filesInFolder.length} files)</span>\n                <button\n                  type=\"button\"\n                  className=\"folder-delete-btn\"\n                  onClick={() => {\n                    // Build full path by traversing up the folder structure\n                    const pathParts = [];\n                    let currentKey = key;\n                    pathParts.unshift(currentKey);\n                    // For nested folders, we'd need to track parent paths\n                    // For now, using the first file's path to determine folder path\n                    if (filesInFolder.length > 0) {\n                      const firstFile = filesInFolder[0];\n                      const fullPath = firstFile.relativePath.substring(0, firstFile.relativePath.lastIndexOf('/'));\n                      deleteFolder(fullPath);\n                    }\n                  }}\n                  disabled={disabled || someFilesUploading}\n                  title={someFilesUploading ? \"Cannot delete while uploading\" : \"Delete entire folder\"}\n                  style={{ \n                    fontSize: '16px',\n                    fontWeight: 'bold'\n                  }}\n                >\n                  ✕\n                </button>\n              </div>\n              {renderLevel(value, level + 1)}\n            </div>\n          );\n        }\n      });\n    };\n\n    return renderLevel(folderStructure);\n  };\n\n  return (\n    <div className=\"file-upload-component\">\n      {/* Drop zone */}\n      <div\n        className={`file-drop-zone ${dragActive ? 'drag-active' : ''} ${disabled ? 'disabled' : ''} ${selectedFiles.length > 0 ? 'has-files' : ''}`}\n        onDragEnter={handleDrag}\n        onDragLeave={handleDrag}\n        onDragOver={handleDrag}\n        onDrop={handleDrop}\n      >\n        {selectedFiles.length === 0 ? (\n          <>\n            <div className=\"upload-icon\">\n              <svg width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"#9ca3af\" strokeWidth=\"2\">\n                <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\" />\n                <polyline points=\"17 8 12 3 7 8\" />\n                <line x1=\"12\" y1=\"3\" x2=\"12\" y2=\"15\" />\n              </svg>\n            </div>\n            \n            <p className=\"upload-text\">\n              Drag and drop files or folders here\n            </p>\n          </>\n        ) : (\n          <div className=\"files-in-dropzone\">\n            <div className=\"dropzone-header\">\n              <h4>Selected Files ({selectedFiles.length}/{maxFiles})</h4>\n              <p className=\"upload-hint\">\n                <small>Drag more files here or use the buttons below</small>\n              </p>\n            </div>\n            <div className=\"dropzone-files-list\">\n              {Object.keys(folderStructure).length > 0 ? (\n                renderFolderStructure()\n              ) : (\n                selectedFiles.map(file => (\n                  <div key={file.id} className=\"file-item compact\">\n                    <div className=\"file-info\">\n                      <span className={`file-type-badge ${getFileTypeInfo(file).className}`}>\n                        {getFileTypeInfo(file).label}\n                      </span>\n                      <span className=\"file-name\">{file.filename}</span>\n                      <span className=\"file-size\">{formatFileSize(file.size)}</span>\n                      \n                      {/* Upload status */}\n                      {file.isUploading && uploadProgress[file.id] < 100 && (\n                        <span className=\"file-status uploading\">\n                          {Math.round(uploadProgress[file.id] || 0)}%\n                        </span>\n                      )}\n                      {((file.isUploading && uploadProgress[file.id] === 100) || (!file.isUploading && !file.uploadError && file.uploadComplete)) && (\n                        <span className=\"file-status uploaded\">✓</span>\n                      )}\n                      {file.uploadError && (\n                        <button\n                          type=\"button\"\n                          className=\"retry-button\"\n                          onClick={() => retryUpload(file.id)}\n                          disabled={disabled || retryingFiles.has(file.id)}\n                          title=\"Retry upload\"\n                        >\n                          ↻\n                        </button>\n                      )}\n                    </div>\n                    \n                    <button\n                      type=\"button\"\n                      className=\"file-remove compact\"\n                      onClick={() => handleDeleteClick(file.id)}\n                      disabled={disabled}\n                      title={file.isUploading ? \"Cancel\" : \"Remove\"}\n                    >\n                      ✕\n                    </button>\n                  </div>\n                ))\n              )}\n            </div>\n          </div>\n        )}\n        \n        {/* Hidden file input */}\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          multiple\n          accept=\".pdf,.jpg,.jpeg,.png,.gif,.webp,.bmp,.tiff,.tif,.svg,.xls,.xlsx,.xlsm,.xlsb,.dwg,.dxf,.dwf,.dwfx,.txt,.csv,.zip,.rar,.7z,.ifc,.rvt,.rfa,.rte,.step,.stp,.stl,.iges,.igs,.sat,.3dm,.3ds,.obj,.dae,.skp\"\n          onChange={handleFileSelect}\n          disabled={disabled}\n          style={{ display: 'none' }}\n        />\n        \n        {/* Hidden folder input */}\n        <input\n          ref={folderInputRef}\n          type=\"file\"\n          multiple\n          webkitdirectory=\"\"\n          directory=\"\"\n          onChange={handleFolderSelect}\n          disabled={disabled}\n          style={{ display: 'none' }}\n        />\n        \n        <div className=\"upload-buttons\">\n          <button\n            type=\"button\"\n            className=\"btn-upload\"\n            onClick={() => fileInputRef.current?.click()}\n            disabled={disabled}\n          >\n            Select Files\n          </button>\n          \n          <button\n            type=\"button\"\n            className=\"btn-upload btn-folder\"\n            onClick={() => folderInputRef.current?.click()}\n            disabled={disabled}\n          >\n            Select Folder\n          </button>\n        </div>\n      </div>\n\n      {/* Error messages */}\n      {errors.length > 0 && (\n        <div className=\"upload-errors\">\n          {errors.map((error, index) => (\n            <div key={index} className=\"error-item\">\n              ⚠️ {error}\n            </div>\n          ))}\n        </div>\n      )}\n\n      \n      {/* Delete Confirmation Dialog */}\n      {showDeleteConfirm && (\n        <div className=\"delete-confirmation-overlay\">\n          <div className=\"delete-confirmation-dialog\">\n            <h3>Confirm File Deletion</h3>\n            <p>\n              {selectedFiles.find(f => f.id === showDeleteConfirm)?.uploadComplete ? (\n                <>\n                  <strong>This file has been uploaded to our servers.</strong><br/>\n                  Are you sure you want to delete it? This will permanently remove the file from storage.\n                </>\n              ) : (\n                'Are you sure you want to remove this file? This action cannot be undone.'\n              )}\n            </p>\n            <div className=\"delete-confirmation-buttons\">\n              <button \n                type=\"button\" \n                className=\"btn-cancel\" \n                onClick={cancelDelete}\n              >\n                Cancel\n              </button>\n              <button \n                type=\"button\" \n                className=\"btn-delete\" \n                onClick={() => confirmDelete(showDeleteConfirm)}\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FileUploadWithFolders;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}