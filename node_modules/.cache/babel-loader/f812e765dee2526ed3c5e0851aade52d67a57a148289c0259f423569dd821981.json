{"ast":null,"code":"var _jsxFileName = \"/Users/adambower/Dev/new-website-adam/website/src/shared/components/FileUpload/FileUploadWithFolders.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport SupabaseStorageService from '../../services/supabaseStorageService';\nimport './FileUpload.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FileUploadWithFolders = ({\n  files = [],\n  onFilesChange,\n  disabled = false,\n  maxFiles = 100,\n  // Increased default for folder uploads\n  formType = 'service-request',\n  // New prop for upload path\n  companyName = 'Unknown Company',\n  // New prop for upload path\n  projectName = 'Unknown Project',\n  // New prop for upload path\n  userId = null // Optional user ID for RLS policies\n}) => {\n  _s();\n  var _selectedFiles$find;\n  const [selectedFiles, setSelectedFiles] = useState(files);\n  const [errors, setErrors] = useState([]);\n  const [dragActive, setDragActive] = useState(false);\n  const fileInputRef = useRef(null);\n  const folderInputRef = useRef(null);\n  const [folderStructure, setFolderStructure] = useState({});\n  const [uploadingFiles, setUploadingFiles] = useState(new Set()); // Track uploading files\n  const [uploadingPaths, setUploadingPaths] = useState({}); // Track file paths being uploaded for deletion\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(null); // Track which file to confirm deletion\n  const [retryingFiles, setRetryingFiles] = useState(new Set()); // Track files being retried\n  const [uploadProgress, setUploadProgress] = useState({}); // Track upload progress for each file\n  const [uploadControllers, setUploadControllers] = useState({}); // Track AbortControllers for cancellation\n  const [sessionId] = useState(() => crypto.randomUUID()); // Generate unique session ID for this form instance\n\n  // Update local state when props change\n  useEffect(() => {\n    setSelectedFiles(files);\n  }, [files]);\n\n  // Handle drag events\n  const handleDrag = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  };\n\n  // Handle drop\n  const handleDrop = async e => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    if (disabled) return;\n    const items = e.dataTransfer.items;\n    const files = [];\n\n    // Check if we have items (could be folders)\n    if (items) {\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i];\n        if (item.kind === 'file') {\n          const entry = item.webkitGetAsEntry();\n          if (entry) {\n            if (entry.isDirectory) {\n              // Handle folder drop\n              const folderFiles = await readDirectory(entry);\n              files.push(...folderFiles);\n            } else {\n              // Handle file drop\n              const file = item.getAsFile();\n              if (file) {\n                files.push({\n                  file,\n                  relativePath: file.name\n                });\n              }\n            }\n          }\n        }\n      }\n    }\n    if (files.length > 0) {\n      handleFiles(files);\n    }\n  };\n\n  // Recursively read directory contents\n  const readDirectory = async (directoryEntry, path = '') => {\n    const files = [];\n    const reader = directoryEntry.createReader();\n    return new Promise(resolve => {\n      const readEntries = () => {\n        reader.readEntries(async entries => {\n          if (entries.length === 0) {\n            resolve(files);\n          } else {\n            for (const entry of entries) {\n              const entryPath = path ? `${path}/${entry.name}` : entry.name;\n              if (entry.isDirectory) {\n                const subFiles = await readDirectory(entry, entryPath);\n                files.push(...subFiles);\n              } else {\n                const file = await new Promise(resolveFile => {\n                  entry.file(file => {\n                    resolveFile({\n                      file,\n                      relativePath: `${directoryEntry.name}/${entryPath}`\n                    });\n                  });\n                });\n                files.push(file);\n              }\n            }\n            readEntries(); // Continue reading\n          }\n        });\n      };\n      readEntries();\n    });\n  };\n\n  // Handle file selection\n  const handleFileSelect = e => {\n    const fileList = e.target.files;\n    if (fileList && fileList.length > 0) {\n      const filesArray = Array.from(fileList).map(file => ({\n        file,\n        relativePath: file.webkitRelativePath || file.name\n      }));\n      handleFiles(filesArray);\n    }\n  };\n\n  // Handle folder selection\n  const handleFolderSelect = e => {\n    const fileList = e.target.files;\n    if (fileList && fileList.length > 0) {\n      const filesArray = Array.from(fileList).map(file => ({\n        file,\n        relativePath: file.webkitRelativePath || file.name\n      }));\n      handleFiles(filesArray);\n    }\n  };\n\n  // Process selected files and immediately upload to Supabase\n  const handleFiles = async newFiles => {\n    // Check max files limit\n    if (selectedFiles.length + newFiles.length > maxFiles) {\n      setErrors([`Maximum ${maxFiles} files allowed`]);\n      return;\n    }\n\n    // Validate files first\n    const validationErrors = [];\n    const validFilesToUpload = [];\n    newFiles.forEach(({\n      file,\n      relativePath\n    }) => {\n      const validation = SupabaseStorageService.validateFile(file);\n      if (validation.isValid) {\n        validFilesToUpload.push({\n          file,\n          relativePath\n        });\n      } else {\n        validationErrors.push(`${file.name}: ${validation.error}`);\n      }\n    });\n    if (validationErrors.length > 0) {\n      setErrors(validationErrors);\n    }\n    if (validFilesToUpload.length === 0) return;\n\n    // Create all file data objects first\n    const newFileDataArray = validFilesToUpload.map(({\n      file,\n      relativePath\n    }) => {\n      const fileId = crypto.randomUUID();\n      return {\n        id: fileId,\n        file: file,\n        filename: file.name,\n        size: file.size,\n        type: file.type,\n        relativePath: relativePath,\n        isLocal: true,\n        isUploading: true,\n        url: null,\n        progress: 0\n      };\n    });\n\n    // Update state once with all new files\n    const updatedFiles = [...selectedFiles, ...newFileDataArray];\n    setSelectedFiles(updatedFiles);\n\n    // Update folder structure once\n    const structure = {\n      ...folderStructure\n    };\n    newFileDataArray.forEach(fileData => {\n      const parts = fileData.relativePath.split('/');\n      let current = structure;\n      for (let i = 0; i < parts.length - 1; i++) {\n        if (!current[parts[i]]) {\n          current[parts[i]] = {};\n        }\n        current = current[parts[i]];\n      }\n      current[parts[parts.length - 1]] = fileData;\n    });\n    setFolderStructure(structure);\n\n    // Update uploading trackers\n    setUploadingFiles(prev => {\n      const newSet = new Set(prev);\n      newFileDataArray.forEach(fileData => newSet.add(fileData.id));\n      return newSet;\n    });\n\n    // Call parent callback once with all updated files\n    if (onFilesChange) {\n      onFilesChange(updatedFiles);\n    }\n\n    // Start uploading files\n    newFileDataArray.forEach(async fileData => {\n      try {\n        console.log('Starting upload for:', fileData.filename, 'formType:', formType, 'company:', companyName, 'project:', projectName);\n\n        // Generate the file path that will be used for upload (for deletion purposes)\n        const expectedPath = SupabaseStorageService.generateFilePath(formType, companyName, projectName, fileData.filename, fileData.relativePath, null, true // preserve exact folder structure\n        );\n\n        // Track the path for this file\n        setUploadingPaths(prev => ({\n          ...prev,\n          [fileData.id]: expectedPath\n        }));\n\n        // Initialize progress\n        setUploadProgress(prev => ({\n          ...prev,\n          [fileData.id]: 0\n        }));\n\n        // Create AbortController for this upload\n        const controller = new AbortController();\n        setUploadControllers(prev => ({\n          ...prev,\n          [fileData.id]: controller\n        }));\n\n        // Add timeout to prevent hanging uploads\n        const uploadPromise = SupabaseStorageService.uploadFile(fileData.file, formType, companyName, projectName, progress => {\n          // Update progress state\n          setUploadProgress(prev => ({\n            ...prev,\n            [fileData.id]: progress\n          }));\n        }, fileData.relativePath, null,\n        // uploadSessionId (deprecated)\n        controller.signal,\n        // AbortSignal for cancellation\n        sessionId,\n        // Session ID for security tracking\n        userId // User ID for RLS policies\n        );\n        const uploadResult = await uploadPromise;\n        console.log('Upload completed for:', fileData.filename, uploadResult);\n\n        // Upload successful - update file data\n        setSelectedFiles(prev => {\n          const updatedFiles = prev.map(f => f.id === fileData.id ? {\n            ...f,\n            isUploading: false,\n            url: uploadResult.url,\n            path: uploadResult.path,\n            uploadDate: uploadResult.uploadDate,\n            session_id: uploadResult.session_id,\n            // Include session_id for security\n            user_id: uploadResult.user_id,\n            // Include user_id for RLS policies\n            isLocal: false,\n            uploadComplete: true\n          } : f);\n\n          // Defer callback to avoid the warning\n          setTimeout(() => {\n            if (onFilesChange) {\n              onFilesChange(updatedFiles);\n            }\n          }, 0);\n          return updatedFiles;\n        });\n\n        // Remove from uploading trackers\n        setUploadingFiles(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(fileData.id);\n          return newSet;\n        });\n        setUploadingPaths(prev => {\n          const newPaths = {\n            ...prev\n          };\n          delete newPaths[fileData.id];\n          return newPaths;\n        });\n\n        // Keep progress at 100% for completed uploads\n        setUploadProgress(prev => ({\n          ...prev,\n          [fileData.id]: 100\n        }));\n\n        // Clear the AbortController\n        setUploadControllers(prev => {\n          const newControllers = {\n            ...prev\n          };\n          delete newControllers[fileData.id];\n          return newControllers;\n        });\n      } catch (error) {\n        // Check if it was an abort error\n        if (error.name === 'AbortError') {\n          console.log('Upload was cancelled:', fileData.filename);\n          // Update file state to show cancellation\n          setSelectedFiles(prev => {\n            const cancelledFiles = prev.map(f => f.id === fileData.id ? {\n              ...f,\n              isUploading: false,\n              uploadError: 'Cancelled'\n            } : f);\n            setTimeout(() => {\n              if (onFilesChange) {\n                onFilesChange(cancelledFiles);\n              }\n            }, 0);\n            return cancelledFiles;\n          });\n        } else {\n          console.error('Upload failed:', error);\n          // Update file with error state\n          setSelectedFiles(prev => {\n            const errorFiles = prev.map(f => f.id === fileData.id ? {\n              ...f,\n              isUploading: false,\n              uploadError: error.message\n            } : f);\n            setTimeout(() => {\n              if (onFilesChange) {\n                onFilesChange(errorFiles);\n              }\n            }, 0);\n            return errorFiles;\n          });\n        }\n\n        // Remove from uploading trackers\n        setUploadingFiles(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(fileData.id);\n          return newSet;\n        });\n        setUploadingPaths(prev => {\n          const newPaths = {\n            ...prev\n          };\n          delete newPaths[fileData.id];\n          return newPaths;\n        });\n        setUploadProgress(prev => {\n          const newProgress = {\n            ...prev\n          };\n          delete newProgress[fileData.id];\n          return newProgress;\n        });\n\n        // Clear the AbortController\n        setUploadControllers(prev => {\n          const newControllers = {\n            ...prev\n          };\n          delete newControllers[fileData.id];\n          return newControllers;\n        });\n        if (error.name !== 'AbortError') {\n          setErrors(prev => [...prev, `Upload failed for ${fileData.filename}: ${error.message}`]);\n        }\n      }\n    });\n    setErrors(validationErrors); // Only show validation errors, upload errors are handled above\n  };\n\n  // Handle delete confirmation\n  const handleDeleteClick = fileId => {\n    const fileToRemove = selectedFiles.find(f => f.id === fileId);\n    if (!fileToRemove) return;\n\n    // For uploading files, delete immediately (cancel)\n    if (uploadingFiles.has(fileId)) {\n      removeFile(fileId);\n      return;\n    }\n\n    // For uploaded files, show confirmation dialog\n    if (!fileToRemove.isLocal || fileToRemove.url) {\n      setShowDeleteConfirm(fileId);\n    } else {\n      // For local files not yet uploaded, delete immediately\n      removeFile(fileId);\n    }\n  };\n\n  // Confirm deletion\n  const confirmDelete = async fileId => {\n    setShowDeleteConfirm(null);\n    await removeFile(fileId);\n  };\n\n  // Cancel deletion\n  const cancelDelete = () => {\n    setShowDeleteConfirm(null);\n  };\n\n  // Retry failed upload\n  const retryUpload = async fileId => {\n    const fileToRetry = selectedFiles.find(f => f.id === fileId);\n    if (!fileToRetry || !fileToRetry.uploadError || !fileToRetry.file) return;\n\n    // Clear error and start retry\n    setSelectedFiles(prev => prev.map(f => f.id === fileId ? {\n      ...f,\n      uploadError: null,\n      isUploading: true\n    } : f));\n    setRetryingFiles(prev => new Set([...prev, fileId]));\n    setUploadingFiles(prev => new Set([...prev, fileId]));\n    try {\n      console.log('Retrying upload for:', fileToRetry.filename);\n\n      // Generate the file path\n      const expectedPath = SupabaseStorageService.generateFilePath(formType, companyName, projectName, fileToRetry.filename, fileToRetry.relativePath, null, true // preserve exact folder structure\n      );\n\n      // Track the path for deletion\n      setUploadingPaths(prev => ({\n        ...prev,\n        [fileId]: expectedPath\n      }));\n\n      // Initialize progress for retry\n      setUploadProgress(prev => ({\n        ...prev,\n        [fileId]: 0\n      }));\n\n      // Create new AbortController for retry\n      const controller = new AbortController();\n      setUploadControllers(prev => ({\n        ...prev,\n        [fileId]: controller\n      }));\n      const uploadResult = await SupabaseStorageService.uploadFile(fileToRetry.file, formType, companyName, projectName, progress => {\n        // Update progress state\n        setUploadProgress(prev => ({\n          ...prev,\n          [fileId]: progress\n        }));\n      }, fileToRetry.relativePath, null,\n      // uploadSessionId (deprecated)\n      controller.signal,\n      // AbortSignal for cancellation\n      sessionId,\n      // Session ID for security tracking\n      userId // User ID for RLS policies\n      );\n      console.log('Retry completed for:', fileToRetry.filename, uploadResult);\n\n      // Update with success\n      setSelectedFiles(prev => {\n        const retrySuccessFiles = prev.map(f => f.id === fileId ? {\n          ...f,\n          isUploading: false,\n          url: uploadResult.url,\n          path: uploadResult.path,\n          uploadDate: uploadResult.uploadDate,\n          session_id: uploadResult.session_id,\n          // Include session_id for security\n          user_id: uploadResult.user_id,\n          // Include user_id for RLS policies\n          isLocal: false,\n          uploadComplete: true\n        } : f);\n        setTimeout(() => {\n          if (onFilesChange) {\n            onFilesChange(retrySuccessFiles);\n          }\n        }, 0);\n        return retrySuccessFiles;\n      });\n\n      // Keep progress at 100% for completed retry\n      setUploadProgress(prev => ({\n        ...prev,\n        [fileId]: 100\n      }));\n\n      // Clear the AbortController\n      setUploadControllers(prev => {\n        const newControllers = {\n          ...prev\n        };\n        delete newControllers[fileId];\n        return newControllers;\n      });\n    } catch (error) {\n      console.error('Retry failed:', error);\n      setSelectedFiles(prev => {\n        const retryErrorFiles = prev.map(f => f.id === fileId ? {\n          ...f,\n          isUploading: false,\n          uploadError: error.message\n        } : f);\n        setTimeout(() => {\n          if (onFilesChange) {\n            onFilesChange(retryErrorFiles);\n          }\n        }, 0);\n        return retryErrorFiles;\n      });\n      setErrors(prev => [...prev, `Retry failed for ${fileToRetry.filename}: ${error.message}`]);\n    } finally {\n      // Clean up tracking\n      setRetryingFiles(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(fileId);\n        return newSet;\n      });\n      setUploadingFiles(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(fileId);\n        return newSet;\n      });\n      setUploadingPaths(prev => {\n        const newPaths = {\n          ...prev\n        };\n        delete newPaths[fileId];\n        return newPaths;\n      });\n      setUploadProgress(prev => {\n        const newProgress = {\n          ...prev\n        };\n        delete newProgress[fileId];\n        return newProgress;\n      });\n      setUploadControllers(prev => {\n        const newControllers = {\n          ...prev\n        };\n        delete newControllers[fileId];\n        return newControllers;\n      });\n    }\n  };\n\n  // Delete entire folder and all its files\n  const deleteFolder = async folderPath => {\n    // Find all files in this folder\n    const filesToDelete = selectedFiles.filter(file => {\n      // Check if file's relative path starts with the folder path\n      const fileFolderPath = file.relativePath ? file.relativePath.substring(0, file.relativePath.lastIndexOf('/')) : '';\n      return fileFolderPath === folderPath || fileFolderPath.startsWith(folderPath + '/');\n    });\n    if (filesToDelete.length === 0) return;\n\n    // Confirm deletion if there are uploaded files\n    const hasUploadedFiles = filesToDelete.some(f => f.uploadComplete || f.path);\n    if (hasUploadedFiles) {\n      const confirmDeletion = window.confirm(`Are you sure you want to delete the folder \"${folderPath.split('/').pop()}\" and all ${filesToDelete.length} file(s) inside it?\\n\\nThis will permanently remove uploaded files from storage.`);\n      if (!confirmDeletion) return;\n    }\n\n    // Collect all file paths that need to be deleted from storage\n    const pathsToDelete = filesToDelete.filter(f => f.path && !f.isLocal).map(f => f.path);\n\n    // Delete files from Supabase storage in batch if there are any uploaded files\n    if (pathsToDelete.length > 0) {\n      try {\n        console.log(`Deleting ${pathsToDelete.length} files from storage...`);\n        const deleteResult = await SupabaseStorageService.deleteMultipleFiles(pathsToDelete, sessionId);\n        console.log(`Deleted ${deleteResult.successful} files from storage, ${deleteResult.failed.length} failed`);\n        if (deleteResult.failed.length > 0) {\n          setErrors(prev => [...prev, `Note: ${deleteResult.failed.length} file(s) could not be removed from server.`]);\n        }\n      } catch (error) {\n        console.error('Error deleting files from storage:', error);\n        setErrors(prev => [...prev, `Note: Files could not be removed from server. They will be cleaned up automatically.`]);\n      }\n    }\n\n    // Remove all files from local state at once\n    const fileIdsToDelete = new Set(filesToDelete.map(f => f.id));\n    const newFiles = selectedFiles.filter(f => !fileIdsToDelete.has(f.id));\n    setSelectedFiles(newFiles);\n\n    // Clear any upload tracking for these files\n    setUploadingFiles(prev => {\n      const newSet = new Set(prev);\n      fileIdsToDelete.forEach(id => newSet.delete(id));\n      return newSet;\n    });\n    setUploadingPaths(prev => {\n      const newPaths = {\n        ...prev\n      };\n      fileIdsToDelete.forEach(id => delete newPaths[id]);\n      return newPaths;\n    });\n    setUploadProgress(prev => {\n      const newProgress = {\n        ...prev\n      };\n      fileIdsToDelete.forEach(id => delete newProgress[id]);\n      return newProgress;\n    });\n    setUploadControllers(prev => {\n      const newControllers = {\n        ...prev\n      };\n      fileIdsToDelete.forEach(id => delete newControllers[id]);\n      return newControllers;\n    });\n\n    // Rebuild folder structure\n    const structure = {};\n    newFiles.forEach(fileData => {\n      const parts = fileData.relativePath.split('/');\n      let current = structure;\n      for (let i = 0; i < parts.length - 1; i++) {\n        if (!current[parts[i]]) {\n          current[parts[i]] = {};\n        }\n        current = current[parts[i]];\n      }\n      current[parts[parts.length - 1]] = fileData;\n    });\n    setFolderStructure(structure);\n\n    // Call parent callback\n    if (onFilesChange) {\n      onFilesChange(newFiles);\n    }\n    console.log(`Deleted folder ${folderPath} with ${filesToDelete.length} files`);\n  };\n\n  // Remove file from list and delete from Supabase if uploaded\n  const removeFile = async (fileId, skipConfirmation = false) => {\n    const fileToRemove = selectedFiles.find(f => f.id === fileId);\n    if (!fileToRemove) return;\n    console.log('Removing file:', fileToRemove.filename, 'ID:', fileId);\n\n    // If file is uploading, cancel it using AbortController\n    if (uploadingFiles.has(fileId)) {\n      // Abort the upload if controller exists\n      const controller = uploadControllers[fileId];\n      if (controller) {\n        controller.abort();\n        console.log('Aborted upload for:', fileToRemove.filename);\n      }\n\n      // Try to delete the partial upload from Supabase if it exists\n      const uploadPath = uploadingPaths[fileId];\n      if (uploadPath) {\n        try {\n          const deleteResult = await SupabaseStorageService.deleteFile(uploadPath, sessionId);\n          if (deleteResult) {\n            console.log('Successfully deleted cancelled upload from Supabase:', uploadPath);\n          } else {\n            console.warn('Failed to delete cancelled upload from Supabase:', uploadPath);\n          }\n        } catch (error) {\n          console.warn('Could not delete cancelled upload (file might not exist yet):', uploadPath, error);\n          // This is expected if the upload hadn't started or completed yet\n        }\n      }\n      setUploadingFiles(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(fileId);\n        return newSet;\n      });\n      setUploadingPaths(prev => {\n        const newPaths = {\n          ...prev\n        };\n        delete newPaths[fileId];\n        return newPaths;\n      });\n      setUploadControllers(prev => {\n        const newControllers = {\n          ...prev\n        };\n        delete newControllers[fileId];\n        return newControllers;\n      });\n    }\n\n    // If file was successfully uploaded, delete it from Supabase\n    if (fileToRemove.path && !fileToRemove.isLocal && !skipConfirmation) {\n      console.log('Attempting to delete uploaded file:', fileToRemove.path);\n\n      // Only allow deletion if file has matching session_id (if session validation is enabled)\n      // For now, we'll attempt deletion regardless to fix the immediate issue\n      const canDelete = !fileToRemove.session_id || fileToRemove.session_id === sessionId;\n      if (canDelete) {\n        try {\n          const deleteResult = await SupabaseStorageService.deleteFile(fileToRemove.path, sessionId);\n          if (deleteResult) {\n            console.log('Successfully deleted file from Supabase:', fileToRemove.filename);\n            setErrors(prev => prev.filter(e => !e.includes(fileToRemove.filename)));\n          } else {\n            console.error('Failed to delete file from Supabase:', fileToRemove.filename);\n            // Show user-friendly error\n            setErrors(prev => [...prev, `Note: File ${fileToRemove.filename} may still exist on server. It will be cleaned up automatically.`]);\n          }\n        } catch (error) {\n          console.error('Error deleting file from Supabase:', error);\n          // Continue with local removal even if Supabase delete fails\n          setErrors(prev => [...prev, `Note: Could not remove ${fileToRemove.filename} from server. It will be cleaned up automatically.`]);\n        }\n      } else {\n        console.warn('Cannot delete file from different session:', fileToRemove.filename);\n        setErrors(prev => [...prev, `Note: Cannot remove ${fileToRemove.filename} - uploaded in different session.`]);\n      }\n    }\n\n    // Remove from local state\n    const newFiles = selectedFiles.filter(f => f.id !== fileId);\n    setSelectedFiles(newFiles);\n\n    // Rebuild folder structure\n    const structure = {};\n    newFiles.forEach(fileData => {\n      const parts = fileData.relativePath.split('/');\n      let current = structure;\n      for (let i = 0; i < parts.length - 1; i++) {\n        if (!current[parts[i]]) {\n          current[parts[i]] = {};\n        }\n        current = current[parts[i]];\n      }\n      current[parts[parts.length - 1]] = fileData;\n    });\n    setFolderStructure(structure);\n\n    // Call parent callback once\n    if (onFilesChange) {\n      onFilesChange(newFiles);\n    }\n  };\n\n  // Format file size\n  const formatFileSize = bytes => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];\n  };\n\n  // Get file type info based on filename or MIME type\n  const getFileTypeInfo = file => {\n    const filename = file.name || file.filename || '';\n    const mimeType = file.type || '';\n    const ext = filename.split('.').pop().toLowerCase();\n\n    // Check by file extension first\n    if (['pdf'].includes(ext)) return {\n      label: 'PDF',\n      className: 'file-type-pdf'\n    };\n    if (['jpg', 'jpeg', 'png', 'gif', 'webp', 'bmp'].includes(ext)) return {\n      label: 'IMG',\n      className: 'file-type-image'\n    };\n    if (['zip', 'rar', '7z'].includes(ext)) return {\n      label: 'ZIP',\n      className: 'file-type-archive'\n    };\n    if (['dwg', 'dxf', 'dwf'].includes(ext)) return {\n      label: 'CAD',\n      className: 'file-type-cad'\n    };\n    if (['xls', 'xlsx', 'xlsm'].includes(ext)) return {\n      label: 'XLS',\n      className: 'file-type-excel'\n    };\n    if (['txt', 'csv'].includes(ext)) return {\n      label: 'TXT',\n      className: 'file-type-text'\n    };\n    if (['rvt', 'rfa', 'ifc'].includes(ext)) return {\n      label: 'BIM',\n      className: 'file-type-bim'\n    };\n\n    // Fall back to MIME type checking\n    if (mimeType.includes('pdf')) return {\n      label: 'PDF',\n      className: 'file-type-pdf'\n    };\n    if (mimeType.includes('image')) return {\n      label: 'IMG',\n      className: 'file-type-image'\n    };\n    if (mimeType.includes('zip') || mimeType.includes('rar')) return {\n      label: 'ZIP',\n      className: 'file-type-archive'\n    };\n    if (mimeType.includes('sheet')) return {\n      label: 'XLS',\n      className: 'file-type-excel'\n    };\n    if (mimeType.includes('text')) return {\n      label: 'TXT',\n      className: 'file-type-text'\n    };\n    return {\n      label: 'FILE',\n      className: 'file-type-default'\n    };\n  };\n\n  // Render folder structure\n  const renderFolderStructure = () => {\n    const renderLevel = (obj, level = 0) => {\n      return Object.entries(obj).map(([key, value]) => {\n        if (value.id) {\n          // It's a file\n          const fileType = getFileTypeInfo(value);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-item compact\",\n            style: {\n              paddingLeft: `${level * 20}px`\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"file-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: `file-type-badge ${fileType.className}`,\n                children: fileType.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 809,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"file-name\",\n                children: value.filename\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 812,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"file-size\",\n                children: formatFileSize(value.size)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 813,\n                columnNumber: 17\n              }, this), value.isUploading && uploadProgress[value.id] < 100 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"file-upload-status\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"file-status uploading\",\n                  children: [\"Uploading... \", uploadProgress[value.id] ? `${Math.round(uploadProgress[value.id])}%` : '0%']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 818,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"progress-bar-container\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"progress-bar-fill\",\n                    style: {\n                      width: `${uploadProgress[value.id] || 0}%`\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 822,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 821,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 817,\n                columnNumber: 19\n              }, this), (value.isUploading && uploadProgress[value.id] === 100 || !value.isUploading && !value.uploadError && value.uploadComplete) && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"file-status uploaded\",\n                children: \"\\u2713 Uploaded\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 830,\n                columnNumber: 19\n              }, this), value.uploadError && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"file-status error\",\n                children: [\"Upload failed: \", value.uploadError, /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  className: \"retry-button\",\n                  onClick: () => retryUpload(value.id),\n                  disabled: disabled || retryingFiles.has(value.id),\n                  title: \"Retry upload\",\n                  children: [retryingFiles.has(value.id) ? '⟳' : '↻', \" Retry\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 835,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 833,\n                columnNumber: 19\n              }, this), value.isLocal && !value.isUploading && !value.uploadComplete && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"file-status pending\",\n                children: \"Pending upload\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 847,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 808,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"file-actions\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: `file-remove compact ${value.isUploading ? 'uploading' : ''}`,\n                onClick: () => handleDeleteClick(value.id),\n                disabled: disabled,\n                title: value.isUploading ? \"Cancel upload\" : \"Remove file\",\n                children: \"\\u2715\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 852,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 851,\n              columnNumber: 15\n            }, this)]\n          }, value.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 807,\n            columnNumber: 13\n          }, this);\n        } else {\n          // It's a folder\n          // Get the full folder path\n          const folderPath = level === 0 ? key : `${key}`;\n\n          // Recursively collect all files in this folder and subfolders\n          const getAllFilesInFolder = obj => {\n            let files = [];\n            Object.values(obj).forEach(item => {\n              if (item && item.id) {\n                // It's a file\n                files.push(item);\n              } else if (typeof item === 'object' && item !== null) {\n                // It's a subfolder, recurse\n                files = files.concat(getAllFilesInFolder(item));\n              }\n            });\n            return files;\n          };\n          const filesInFolder = getAllFilesInFolder(value);\n          const allFilesUploaded = filesInFolder.every(f => f.uploadComplete === true);\n          // Check if any files are actually still uploading using the Set tracker\n          const someFilesUploading = filesInFolder.some(f => uploadingFiles.has(f.id));\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"folder-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"folder-header\",\n              style: {\n                paddingLeft: `${level * 20}px`\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n                className: \"folder-icon\",\n                width: \"15\",\n                height: \"15\",\n                viewBox: \"0 0 16 16\",\n                fill: \"currentColor\",\n                children: /*#__PURE__*/_jsxDEV(\"path\", {\n                  d: \"M9.828 3h3.982a2 2 0 0 1 1.992 2.181l-.637 7A2 2 0 0 1 13.174 14H2.826a2 2 0 0 1-1.991-1.819l-.637-7a1.99 1.99 0 0 1 .342-1.31L.5 3a2 2 0 0 1 2-2h3.672a2 2 0 0 1 1.414.586l.828.828A2 2 0 0 0 9.828 3z\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 901,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 894,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"folder-name\",\n                children: key\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 903,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"folder-file-count\",\n                children: [\"(\", filesInFolder.length, \" files)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 904,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"folder-delete-btn\",\n                onClick: () => {\n                  // Build full path by traversing up the folder structure\n                  const pathParts = [];\n                  let currentKey = key;\n                  pathParts.unshift(currentKey);\n                  // For nested folders, we'd need to track parent paths\n                  // For now, using the first file's path to determine folder path\n                  if (filesInFolder.length > 0) {\n                    const firstFile = filesInFolder[0];\n                    const fullPath = firstFile.relativePath.substring(0, firstFile.relativePath.lastIndexOf('/'));\n                    deleteFolder(fullPath);\n                  }\n                },\n                disabled: disabled || someFilesUploading,\n                title: someFilesUploading ? \"Cannot delete while uploading\" : \"Delete entire folder\",\n                style: {\n                  fontSize: '16px',\n                  fontWeight: 'bold'\n                },\n                children: \"\\u2715\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 905,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 893,\n              columnNumber: 15\n            }, this), renderLevel(value, level + 1)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 892,\n            columnNumber: 13\n          }, this);\n        }\n      });\n    };\n    return renderLevel(folderStructure);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"file-upload-component\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `file-drop-zone ${dragActive ? 'drag-active' : ''} ${disabled ? 'disabled' : ''} ${selectedFiles.length > 0 ? 'has-files' : ''}`,\n      onDragEnter: handleDrag,\n      onDragLeave: handleDrag,\n      onDragOver: handleDrag,\n      onDrop: handleDrop,\n      children: [selectedFiles.length === 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-icon\",\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            width: \"48\",\n            height: \"48\",\n            viewBox: \"0 0 24 24\",\n            fill: \"none\",\n            stroke: \"#9ca3af\",\n            strokeWidth: \"2\",\n            children: [/*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 955,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"polyline\", {\n              points: \"17 8 12 3 7 8\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 956,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n              x1: \"12\",\n              y1: \"3\",\n              x2: \"12\",\n              y2: \"15\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 957,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 954,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 953,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"upload-text\",\n          children: \"Drag and drop files or folders here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 961,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"files-in-dropzone\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropzone-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Selected Files (\", selectedFiles.length, \"/\", maxFiles, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 968,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"upload-hint\",\n            children: /*#__PURE__*/_jsxDEV(\"small\", {\n              children: \"Drag more files here or use the buttons below\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 970,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 969,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 967,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropzone-files-list\",\n          children: Object.keys(folderStructure).length > 0 ? renderFolderStructure() : selectedFiles.map(file => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-item compact\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"file-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: `file-type-badge ${getFileTypeInfo(file).className}`,\n                children: getFileTypeInfo(file).label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 980,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"file-name\",\n                children: file.filename\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 983,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"file-size\",\n                children: formatFileSize(file.size)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 984,\n                columnNumber: 23\n              }, this), file.isUploading && uploadProgress[file.id] < 100 && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"file-status uploading\",\n                children: [Math.round(uploadProgress[file.id] || 0), \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 988,\n                columnNumber: 25\n              }, this), (file.isUploading && uploadProgress[file.id] === 100 || !file.isUploading && !file.uploadError && file.uploadComplete) && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"file-status uploaded\",\n                children: \"\\u2713\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 993,\n                columnNumber: 25\n              }, this), file.uploadError && /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"retry-button\",\n                onClick: () => retryUpload(file.id),\n                disabled: disabled || retryingFiles.has(file.id),\n                title: \"Retry upload\",\n                children: \"\\u21BB\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 996,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 979,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"file-remove compact\",\n              onClick: () => handleDeleteClick(file.id),\n              disabled: disabled,\n              title: file.isUploading ? \"Cancel\" : \"Remove\",\n              children: \"\\u2715\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1008,\n              columnNumber: 21\n            }, this)]\n          }, file.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 978,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 973,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 966,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: fileInputRef,\n        type: \"file\",\n        multiple: true,\n        accept: \".pdf,.jpg,.jpeg,.png,.gif,.webp,.bmp,.tiff,.tif,.svg,.xls,.xlsx,.xlsm,.xlsb,.dwg,.dxf,.dwf,.dwfx,.txt,.csv,.zip,.rar,.7z,.ifc,.rvt,.rfa,.rte,.step,.stp,.stl,.iges,.igs,.sat,.3dm,.3ds,.obj,.dae,.skp\",\n        onChange: handleFileSelect,\n        disabled: disabled,\n        style: {\n          display: 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1025,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: folderInputRef,\n        type: \"file\",\n        multiple: true,\n        webkitdirectory: \"\",\n        directory: \"\",\n        onChange: handleFolderSelect,\n        disabled: disabled,\n        style: {\n          display: 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1036,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn-upload\",\n          onClick: () => {\n            var _fileInputRef$current;\n            return (_fileInputRef$current = fileInputRef.current) === null || _fileInputRef$current === void 0 ? void 0 : _fileInputRef$current.click();\n          },\n          disabled: disabled,\n          children: \"Select Files\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1048,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn-upload btn-folder\",\n          onClick: () => {\n            var _folderInputRef$curre;\n            return (_folderInputRef$curre = folderInputRef.current) === null || _folderInputRef$curre === void 0 ? void 0 : _folderInputRef$curre.click();\n          },\n          disabled: disabled,\n          children: \"Select Folder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1057,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1047,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 944,\n      columnNumber: 7\n    }, this), errors.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-errors\",\n      children: errors.map((error, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-item\",\n        children: [\"\\u26A0\\uFE0F \", error]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1072,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1070,\n      columnNumber: 9\n    }, this), showDeleteConfirm && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"delete-confirmation-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"delete-confirmation-dialog\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Confirm File Deletion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1084,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: (_selectedFiles$find = selectedFiles.find(f => f.id === showDeleteConfirm)) !== null && _selectedFiles$find !== void 0 && _selectedFiles$find.uploadComplete ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"This file has been uploaded to our servers.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1088,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1088,\n              columnNumber: 79\n            }, this), \"Are you sure you want to delete it? This will permanently remove the file from storage.\"]\n          }, void 0, true) : 'Are you sure you want to remove this file? This action cannot be undone.'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1085,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"delete-confirmation-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn-cancel\",\n            onClick: cancelDelete,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1096,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn-delete\",\n            onClick: () => confirmDelete(showDeleteConfirm),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1103,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1095,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1083,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1082,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 942,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUploadWithFolders, \"e/lDNjb75np8JEgBuQJwMgP/1HY=\");\n_c = FileUploadWithFolders;\nexport default FileUploadWithFolders;\nvar _c;\n$RefreshReg$(_c, \"FileUploadWithFolders\");","map":{"version":3,"names":["React","useState","useRef","useEffect","SupabaseStorageService","jsxDEV","_jsxDEV","Fragment","_Fragment","FileUploadWithFolders","files","onFilesChange","disabled","maxFiles","formType","companyName","projectName","userId","_s","_selectedFiles$find","selectedFiles","setSelectedFiles","errors","setErrors","dragActive","setDragActive","fileInputRef","folderInputRef","folderStructure","setFolderStructure","uploadingFiles","setUploadingFiles","Set","uploadingPaths","setUploadingPaths","showDeleteConfirm","setShowDeleteConfirm","retryingFiles","setRetryingFiles","uploadProgress","setUploadProgress","uploadControllers","setUploadControllers","sessionId","crypto","randomUUID","handleDrag","e","preventDefault","stopPropagation","type","handleDrop","items","dataTransfer","i","length","item","kind","entry","webkitGetAsEntry","isDirectory","folderFiles","readDirectory","push","file","getAsFile","relativePath","name","handleFiles","directoryEntry","path","reader","createReader","Promise","resolve","readEntries","entries","entryPath","subFiles","resolveFile","handleFileSelect","fileList","target","filesArray","Array","from","map","webkitRelativePath","handleFolderSelect","newFiles","validationErrors","validFilesToUpload","forEach","validation","validateFile","isValid","error","newFileDataArray","fileId","id","filename","size","isLocal","isUploading","url","progress","updatedFiles","structure","fileData","parts","split","current","prev","newSet","add","console","log","expectedPath","generateFilePath","controller","AbortController","uploadPromise","uploadFile","signal","uploadResult","f","uploadDate","session_id","user_id","uploadComplete","setTimeout","delete","newPaths","newControllers","cancelledFiles","uploadError","errorFiles","message","newProgress","handleDeleteClick","fileToRemove","find","has","removeFile","confirmDelete","cancelDelete","retryUpload","fileToRetry","retrySuccessFiles","retryErrorFiles","deleteFolder","folderPath","filesToDelete","filter","fileFolderPath","substring","lastIndexOf","startsWith","hasUploadedFiles","some","confirmDeletion","window","confirm","pop","pathsToDelete","deleteResult","deleteMultipleFiles","successful","failed","fileIdsToDelete","skipConfirmation","abort","uploadPath","deleteFile","warn","canDelete","includes","formatFileSize","bytes","k","sizes","Math","floor","round","pow","getFileTypeInfo","mimeType","ext","toLowerCase","label","className","renderFolderStructure","renderLevel","obj","level","Object","key","value","fileType","style","paddingLeft","children","fileName","_jsxFileName","lineNumber","columnNumber","width","onClick","title","getAllFilesInFolder","values","concat","filesInFolder","allFilesUploaded","every","someFilesUploading","height","viewBox","fill","d","pathParts","currentKey","unshift","firstFile","fullPath","fontSize","fontWeight","onDragEnter","onDragLeave","onDragOver","onDrop","stroke","strokeWidth","points","x1","y1","x2","y2","keys","ref","multiple","accept","onChange","display","webkitdirectory","directory","_fileInputRef$current","click","_folderInputRef$curre","index","_c","$RefreshReg$"],"sources":["/Users/adambower/Dev/new-website-adam/website/src/shared/components/FileUpload/FileUploadWithFolders.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport SupabaseStorageService from '../../services/supabaseStorageService';\nimport './FileUpload.css';\n\nconst FileUploadWithFolders = ({\n  files = [],\n  onFilesChange,\n  disabled = false,\n  maxFiles = 100,  // Increased default for folder uploads\n  formType = 'service-request',  // New prop for upload path\n  companyName = 'Unknown Company',  // New prop for upload path\n  projectName = 'Unknown Project',  // New prop for upload path\n  userId = null  // Optional user ID for RLS policies\n}) => {\n  const [selectedFiles, setSelectedFiles] = useState(files);\n  const [errors, setErrors] = useState([]);\n  const [dragActive, setDragActive] = useState(false);\n  const fileInputRef = useRef(null);\n  const folderInputRef = useRef(null);\n  const [folderStructure, setFolderStructure] = useState({});\n  const [uploadingFiles, setUploadingFiles] = useState(new Set()); // Track uploading files\n  const [uploadingPaths, setUploadingPaths] = useState({}); // Track file paths being uploaded for deletion\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(null); // Track which file to confirm deletion\n  const [retryingFiles, setRetryingFiles] = useState(new Set()); // Track files being retried\n  const [uploadProgress, setUploadProgress] = useState({}); // Track upload progress for each file\n  const [uploadControllers, setUploadControllers] = useState({}); // Track AbortControllers for cancellation\n  const [sessionId] = useState(() => crypto.randomUUID()); // Generate unique session ID for this form instance\n\n  // Update local state when props change\n  useEffect(() => {\n    setSelectedFiles(files);\n  }, [files]);\n\n  // Handle drag events\n  const handleDrag = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  };\n\n  // Handle drop\n  const handleDrop = async (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    if (disabled) return;\n    \n    const items = e.dataTransfer.items;\n    const files = [];\n    \n    // Check if we have items (could be folders)\n    if (items) {\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i];\n        if (item.kind === 'file') {\n          const entry = item.webkitGetAsEntry();\n          if (entry) {\n            if (entry.isDirectory) {\n              // Handle folder drop\n              const folderFiles = await readDirectory(entry);\n              files.push(...folderFiles);\n            } else {\n              // Handle file drop\n              const file = item.getAsFile();\n              if (file) {\n                files.push({ file, relativePath: file.name });\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    if (files.length > 0) {\n      handleFiles(files);\n    }\n  };\n\n  // Recursively read directory contents\n  const readDirectory = async (directoryEntry, path = '') => {\n    const files = [];\n    const reader = directoryEntry.createReader();\n    \n    return new Promise((resolve) => {\n      const readEntries = () => {\n        reader.readEntries(async (entries) => {\n          if (entries.length === 0) {\n            resolve(files);\n          } else {\n            for (const entry of entries) {\n              const entryPath = path ? `${path}/${entry.name}` : entry.name;\n              \n              if (entry.isDirectory) {\n                const subFiles = await readDirectory(entry, entryPath);\n                files.push(...subFiles);\n              } else {\n                const file = await new Promise((resolveFile) => {\n                  entry.file((file) => {\n                    resolveFile({ \n                      file, \n                      relativePath: `${directoryEntry.name}/${entryPath}` \n                    });\n                  });\n                });\n                files.push(file);\n              }\n            }\n            readEntries(); // Continue reading\n          }\n        });\n      };\n      readEntries();\n    });\n  };\n\n  // Handle file selection\n  const handleFileSelect = (e) => {\n    const fileList = e.target.files;\n    if (fileList && fileList.length > 0) {\n      const filesArray = Array.from(fileList).map(file => ({\n        file,\n        relativePath: file.webkitRelativePath || file.name\n      }));\n      handleFiles(filesArray);\n    }\n  };\n\n  // Handle folder selection\n  const handleFolderSelect = (e) => {\n    const fileList = e.target.files;\n    if (fileList && fileList.length > 0) {\n      const filesArray = Array.from(fileList).map(file => ({\n        file,\n        relativePath: file.webkitRelativePath || file.name\n      }));\n      handleFiles(filesArray);\n    }\n  };\n\n  // Process selected files and immediately upload to Supabase\n  const handleFiles = async (newFiles) => {\n    // Check max files limit\n    if (selectedFiles.length + newFiles.length > maxFiles) {\n      setErrors([`Maximum ${maxFiles} files allowed`]);\n      return;\n    }\n\n    // Validate files first\n    const validationErrors = [];\n    const validFilesToUpload = [];\n    \n    newFiles.forEach(({ file, relativePath }) => {\n      const validation = SupabaseStorageService.validateFile(file);\n      if (validation.isValid) {\n        validFilesToUpload.push({ file, relativePath });\n      } else {\n        validationErrors.push(`${file.name}: ${validation.error}`);\n      }\n    });\n\n    if (validationErrors.length > 0) {\n      setErrors(validationErrors);\n    }\n\n    if (validFilesToUpload.length === 0) return;\n\n    // Create all file data objects first\n    const newFileDataArray = validFilesToUpload.map(({ file, relativePath }) => {\n      const fileId = crypto.randomUUID();\n      \n      return {\n        id: fileId,\n        file: file,\n        filename: file.name,\n        size: file.size,\n        type: file.type,\n        relativePath: relativePath,\n        isLocal: true,\n        isUploading: true,\n        url: null,\n        progress: 0\n      };\n    });\n\n    // Update state once with all new files\n    const updatedFiles = [...selectedFiles, ...newFileDataArray];\n    setSelectedFiles(updatedFiles);\n    \n    // Update folder structure once\n    const structure = { ...folderStructure };\n    newFileDataArray.forEach(fileData => {\n      const parts = fileData.relativePath.split('/');\n      let current = structure;\n      for (let i = 0; i < parts.length - 1; i++) {\n        if (!current[parts[i]]) {\n          current[parts[i]] = {};\n        }\n        current = current[parts[i]];\n      }\n      current[parts[parts.length - 1]] = fileData;\n    });\n    setFolderStructure(structure);\n\n    // Update uploading trackers\n    setUploadingFiles(prev => {\n      const newSet = new Set(prev);\n      newFileDataArray.forEach(fileData => newSet.add(fileData.id));\n      return newSet;\n    });\n    \n\n    // Call parent callback once with all updated files\n    if (onFilesChange) {\n      onFilesChange(updatedFiles);\n    }\n\n    // Start uploading files\n    newFileDataArray.forEach(async (fileData) => {\n      try {\n        console.log('Starting upload for:', fileData.filename, 'formType:', formType, 'company:', companyName, 'project:', projectName);\n        \n        // Generate the file path that will be used for upload (for deletion purposes)\n        const expectedPath = SupabaseStorageService.generateFilePath(\n          formType, \n          companyName, \n          projectName, \n          fileData.filename, \n          fileData.relativePath,\n          null,\n          true // preserve exact folder structure\n        );\n        \n        // Track the path for this file\n        setUploadingPaths(prev => ({ ...prev, [fileData.id]: expectedPath }));\n        \n        // Initialize progress\n        setUploadProgress(prev => ({ ...prev, [fileData.id]: 0 }));\n        \n        // Create AbortController for this upload\n        const controller = new AbortController();\n        setUploadControllers(prev => ({ ...prev, [fileData.id]: controller }));\n        \n        // Add timeout to prevent hanging uploads\n        const uploadPromise = SupabaseStorageService.uploadFile(\n          fileData.file,\n          formType,\n          companyName,\n          projectName,\n          (progress) => {\n            // Update progress state\n            setUploadProgress(prev => ({ ...prev, [fileData.id]: progress }));\n          },\n          fileData.relativePath,\n          null, // uploadSessionId (deprecated)\n          controller.signal, // AbortSignal for cancellation\n          sessionId, // Session ID for security tracking\n          userId // User ID for RLS policies\n        );\n        \n        const uploadResult = await uploadPromise;\n        \n        console.log('Upload completed for:', fileData.filename, uploadResult);\n\n        // Upload successful - update file data\n        setSelectedFiles(prev => {\n          const updatedFiles = prev.map(f => \n            f.id === fileData.id ? { \n              ...f, \n              isUploading: false, \n              url: uploadResult.url,\n              path: uploadResult.path,\n              uploadDate: uploadResult.uploadDate,\n              session_id: uploadResult.session_id, // Include session_id for security\n              user_id: uploadResult.user_id, // Include user_id for RLS policies\n              isLocal: false,\n              uploadComplete: true\n            } : f\n          );\n          \n          // Defer callback to avoid the warning\n          setTimeout(() => {\n            if (onFilesChange) {\n              onFilesChange(updatedFiles);\n            }\n          }, 0);\n          \n          return updatedFiles;\n        })\n\n        // Remove from uploading trackers\n        setUploadingFiles(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(fileData.id);\n          return newSet;\n        });\n\n        setUploadingPaths(prev => {\n          const newPaths = { ...prev };\n          delete newPaths[fileData.id];\n          return newPaths;\n        });\n        \n        // Keep progress at 100% for completed uploads\n        setUploadProgress(prev => ({ ...prev, [fileData.id]: 100 }));\n        \n        // Clear the AbortController\n        setUploadControllers(prev => {\n          const newControllers = { ...prev };\n          delete newControllers[fileData.id];\n          return newControllers;\n        });\n\n      } catch (error) {\n        // Check if it was an abort error\n        if (error.name === 'AbortError') {\n          console.log('Upload was cancelled:', fileData.filename);\n          // Update file state to show cancellation\n          setSelectedFiles(prev => {\n            const cancelledFiles = prev.map(f => \n              f.id === fileData.id ? { ...f, isUploading: false, uploadError: 'Cancelled' } : f\n            );\n            \n            setTimeout(() => {\n              if (onFilesChange) {\n                onFilesChange(cancelledFiles);\n              }\n            }, 0);\n            \n            return cancelledFiles;\n          })\n        } else {\n          console.error('Upload failed:', error);\n          // Update file with error state\n          setSelectedFiles(prev => {\n            const errorFiles = prev.map(f => \n              f.id === fileData.id ? { ...f, isUploading: false, uploadError: error.message } : f\n            );\n            \n            setTimeout(() => {\n              if (onFilesChange) {\n                onFilesChange(errorFiles);\n              }\n            }, 0);\n            \n            return errorFiles;\n          })\n        }\n\n        // Remove from uploading trackers\n        setUploadingFiles(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(fileData.id);\n          return newSet;\n        });\n\n        setUploadingPaths(prev => {\n          const newPaths = { ...prev };\n          delete newPaths[fileData.id];\n          return newPaths;\n        });\n        \n        setUploadProgress(prev => {\n          const newProgress = { ...prev };\n          delete newProgress[fileData.id];\n          return newProgress;\n        });\n        \n        // Clear the AbortController\n        setUploadControllers(prev => {\n          const newControllers = { ...prev };\n          delete newControllers[fileData.id];\n          return newControllers;\n        });\n\n        if (error.name !== 'AbortError') {\n          setErrors(prev => [...prev, `Upload failed for ${fileData.filename}: ${error.message}`]);\n        }\n      }\n    });\n\n    setErrors(validationErrors); // Only show validation errors, upload errors are handled above\n  };\n\n  // Handle delete confirmation\n  const handleDeleteClick = (fileId) => {\n    const fileToRemove = selectedFiles.find(f => f.id === fileId);\n    if (!fileToRemove) return;\n    \n    // For uploading files, delete immediately (cancel)\n    if (uploadingFiles.has(fileId)) {\n      removeFile(fileId);\n      return;\n    }\n    \n    // For uploaded files, show confirmation dialog\n    if (!fileToRemove.isLocal || fileToRemove.url) {\n      setShowDeleteConfirm(fileId);\n    } else {\n      // For local files not yet uploaded, delete immediately\n      removeFile(fileId);\n    }\n  };\n\n  // Confirm deletion\n  const confirmDelete = async (fileId) => {\n    setShowDeleteConfirm(null);\n    await removeFile(fileId);\n  };\n\n  // Cancel deletion\n  const cancelDelete = () => {\n    setShowDeleteConfirm(null);\n  };\n\n  // Retry failed upload\n  const retryUpload = async (fileId) => {\n    const fileToRetry = selectedFiles.find(f => f.id === fileId);\n    if (!fileToRetry || !fileToRetry.uploadError || !fileToRetry.file) return;\n\n    // Clear error and start retry\n    setSelectedFiles(prev => prev.map(f => \n      f.id === fileId ? { ...f, uploadError: null, isUploading: true } : f\n    ));\n    \n    setRetryingFiles(prev => new Set([...prev, fileId]));\n    setUploadingFiles(prev => new Set([...prev, fileId]));\n\n    try {\n      console.log('Retrying upload for:', fileToRetry.filename);\n      \n      // Generate the file path\n      const expectedPath = SupabaseStorageService.generateFilePath(\n        formType, \n        companyName, \n        projectName, \n        fileToRetry.filename, \n        fileToRetry.relativePath,\n        null,\n        true // preserve exact folder structure\n      );\n      \n      // Track the path for deletion\n      setUploadingPaths(prev => ({ ...prev, [fileId]: expectedPath }));\n      \n      // Initialize progress for retry\n      setUploadProgress(prev => ({ ...prev, [fileId]: 0 }));\n      \n      // Create new AbortController for retry\n      const controller = new AbortController();\n      setUploadControllers(prev => ({ ...prev, [fileId]: controller }));\n      \n      const uploadResult = await SupabaseStorageService.uploadFile(\n        fileToRetry.file,\n        formType,\n        companyName,\n        projectName,\n        (progress) => {\n          // Update progress state\n          setUploadProgress(prev => ({ ...prev, [fileId]: progress }));\n        },\n        fileToRetry.relativePath,\n        null, // uploadSessionId (deprecated)\n        controller.signal, // AbortSignal for cancellation\n        sessionId, // Session ID for security tracking\n        userId // User ID for RLS policies\n      );\n\n      console.log('Retry completed for:', fileToRetry.filename, uploadResult);\n\n      // Update with success\n      setSelectedFiles(prev => {\n        const retrySuccessFiles = prev.map(f => \n          f.id === fileId ? { \n            ...f, \n            isUploading: false, \n            url: uploadResult.url,\n            path: uploadResult.path,\n            uploadDate: uploadResult.uploadDate,\n            session_id: uploadResult.session_id, // Include session_id for security\n            user_id: uploadResult.user_id, // Include user_id for RLS policies\n            isLocal: false,\n            uploadComplete: true\n          } : f\n        );\n        \n        setTimeout(() => {\n          if (onFilesChange) {\n            onFilesChange(retrySuccessFiles);\n          }\n        }, 0);\n        \n        return retrySuccessFiles;\n      })\n      \n      // Keep progress at 100% for completed retry\n      setUploadProgress(prev => ({ ...prev, [fileId]: 100 }));\n      \n      // Clear the AbortController\n      setUploadControllers(prev => {\n        const newControllers = { ...prev };\n        delete newControllers[fileId];\n        return newControllers;\n      });\n\n    } catch (error) {\n      console.error('Retry failed:', error);\n      \n      setSelectedFiles(prev => {\n        const retryErrorFiles = prev.map(f => \n          f.id === fileId ? { ...f, isUploading: false, uploadError: error.message } : f\n        );\n        \n        setTimeout(() => {\n          if (onFilesChange) {\n            onFilesChange(retryErrorFiles);\n          }\n        }, 0);\n        \n        return retryErrorFiles;\n      })\n\n      setErrors(prev => [...prev, `Retry failed for ${fileToRetry.filename}: ${error.message}`]);\n    } finally {\n      // Clean up tracking\n      setRetryingFiles(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(fileId);\n        return newSet;\n      });\n\n      setUploadingFiles(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(fileId);\n        return newSet;\n      });\n\n\n      setUploadingPaths(prev => {\n        const newPaths = { ...prev };\n        delete newPaths[fileId];\n        return newPaths;\n      });\n      \n      setUploadProgress(prev => {\n        const newProgress = { ...prev };\n        delete newProgress[fileId];\n        return newProgress;\n      });\n      \n      setUploadControllers(prev => {\n        const newControllers = { ...prev };\n        delete newControllers[fileId];\n        return newControllers;\n      });\n    }\n  };\n\n  // Delete entire folder and all its files\n  const deleteFolder = async (folderPath) => {\n    // Find all files in this folder\n    const filesToDelete = selectedFiles.filter(file => {\n      // Check if file's relative path starts with the folder path\n      const fileFolderPath = file.relativePath ? file.relativePath.substring(0, file.relativePath.lastIndexOf('/')) : '';\n      return fileFolderPath === folderPath || fileFolderPath.startsWith(folderPath + '/');\n    });\n    \n    if (filesToDelete.length === 0) return;\n    \n    // Confirm deletion if there are uploaded files\n    const hasUploadedFiles = filesToDelete.some(f => f.uploadComplete || f.path);\n    if (hasUploadedFiles) {\n      const confirmDeletion = window.confirm(\n        `Are you sure you want to delete the folder \"${folderPath.split('/').pop()}\" and all ${filesToDelete.length} file(s) inside it?\\n\\nThis will permanently remove uploaded files from storage.`\n      );\n      if (!confirmDeletion) return;\n    }\n    \n    // Collect all file paths that need to be deleted from storage\n    const pathsToDelete = filesToDelete\n      .filter(f => f.path && !f.isLocal)\n      .map(f => f.path);\n    \n    // Delete files from Supabase storage in batch if there are any uploaded files\n    if (pathsToDelete.length > 0) {\n      try {\n        console.log(`Deleting ${pathsToDelete.length} files from storage...`);\n        const deleteResult = await SupabaseStorageService.deleteMultipleFiles(pathsToDelete, sessionId);\n        console.log(`Deleted ${deleteResult.successful} files from storage, ${deleteResult.failed.length} failed`);\n        \n        if (deleteResult.failed.length > 0) {\n          setErrors(prev => [...prev, `Note: ${deleteResult.failed.length} file(s) could not be removed from server.`]);\n        }\n      } catch (error) {\n        console.error('Error deleting files from storage:', error);\n        setErrors(prev => [...prev, `Note: Files could not be removed from server. They will be cleaned up automatically.`]);\n      }\n    }\n    \n    // Remove all files from local state at once\n    const fileIdsToDelete = new Set(filesToDelete.map(f => f.id));\n    const newFiles = selectedFiles.filter(f => !fileIdsToDelete.has(f.id));\n    setSelectedFiles(newFiles);\n    \n    // Clear any upload tracking for these files\n    setUploadingFiles(prev => {\n      const newSet = new Set(prev);\n      fileIdsToDelete.forEach(id => newSet.delete(id));\n      return newSet;\n    });\n    \n    setUploadingPaths(prev => {\n      const newPaths = { ...prev };\n      fileIdsToDelete.forEach(id => delete newPaths[id]);\n      return newPaths;\n    });\n    \n    setUploadProgress(prev => {\n      const newProgress = { ...prev };\n      fileIdsToDelete.forEach(id => delete newProgress[id]);\n      return newProgress;\n    });\n    \n    setUploadControllers(prev => {\n      const newControllers = { ...prev };\n      fileIdsToDelete.forEach(id => delete newControllers[id]);\n      return newControllers;\n    });\n    \n    // Rebuild folder structure\n    const structure = {};\n    newFiles.forEach(fileData => {\n      const parts = fileData.relativePath.split('/');\n      let current = structure;\n      for (let i = 0; i < parts.length - 1; i++) {\n        if (!current[parts[i]]) {\n          current[parts[i]] = {};\n        }\n        current = current[parts[i]];\n      }\n      current[parts[parts.length - 1]] = fileData;\n    });\n    setFolderStructure(structure);\n    \n    // Call parent callback\n    if (onFilesChange) {\n      onFilesChange(newFiles);\n    }\n    \n    console.log(`Deleted folder ${folderPath} with ${filesToDelete.length} files`);\n  };\n  \n  // Remove file from list and delete from Supabase if uploaded\n  const removeFile = async (fileId, skipConfirmation = false) => {\n    const fileToRemove = selectedFiles.find(f => f.id === fileId);\n    \n    if (!fileToRemove) return;\n    \n    console.log('Removing file:', fileToRemove.filename, 'ID:', fileId);\n    \n    // If file is uploading, cancel it using AbortController\n    if (uploadingFiles.has(fileId)) {\n      // Abort the upload if controller exists\n      const controller = uploadControllers[fileId];\n      if (controller) {\n        controller.abort();\n        console.log('Aborted upload for:', fileToRemove.filename);\n      }\n      \n      // Try to delete the partial upload from Supabase if it exists\n      const uploadPath = uploadingPaths[fileId];\n      if (uploadPath) {\n        try {\n          const deleteResult = await SupabaseStorageService.deleteFile(uploadPath, sessionId);\n          if (deleteResult) {\n            console.log('Successfully deleted cancelled upload from Supabase:', uploadPath);\n          } else {\n            console.warn('Failed to delete cancelled upload from Supabase:', uploadPath);\n          }\n        } catch (error) {\n          console.warn('Could not delete cancelled upload (file might not exist yet):', uploadPath, error);\n          // This is expected if the upload hadn't started or completed yet\n        }\n      }\n      \n      setUploadingFiles(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(fileId);\n        return newSet;\n      });\n      \n      setUploadingPaths(prev => {\n        const newPaths = { ...prev };\n        delete newPaths[fileId];\n        return newPaths;\n      });\n      \n      setUploadControllers(prev => {\n        const newControllers = { ...prev };\n        delete newControllers[fileId];\n        return newControllers;\n      });\n    }\n    \n    // If file was successfully uploaded, delete it from Supabase\n    if (fileToRemove.path && !fileToRemove.isLocal && !skipConfirmation) {\n      console.log('Attempting to delete uploaded file:', fileToRemove.path);\n      \n      // Only allow deletion if file has matching session_id (if session validation is enabled)\n      // For now, we'll attempt deletion regardless to fix the immediate issue\n      const canDelete = !fileToRemove.session_id || fileToRemove.session_id === sessionId;\n      \n      if (canDelete) {\n        try {\n          const deleteResult = await SupabaseStorageService.deleteFile(fileToRemove.path, sessionId);\n          if (deleteResult) {\n            console.log('Successfully deleted file from Supabase:', fileToRemove.filename);\n            setErrors(prev => prev.filter(e => !e.includes(fileToRemove.filename)));\n          } else {\n            console.error('Failed to delete file from Supabase:', fileToRemove.filename);\n            // Show user-friendly error\n            setErrors(prev => [...prev, `Note: File ${fileToRemove.filename} may still exist on server. It will be cleaned up automatically.`]);\n          }\n        } catch (error) {\n          console.error('Error deleting file from Supabase:', error);\n          // Continue with local removal even if Supabase delete fails\n          setErrors(prev => [...prev, `Note: Could not remove ${fileToRemove.filename} from server. It will be cleaned up automatically.`]);\n        }\n      } else {\n        console.warn('Cannot delete file from different session:', fileToRemove.filename);\n        setErrors(prev => [...prev, `Note: Cannot remove ${fileToRemove.filename} - uploaded in different session.`]);\n      }\n    }\n    \n    // Remove from local state\n    const newFiles = selectedFiles.filter(f => f.id !== fileId);\n    setSelectedFiles(newFiles);\n    \n    // Rebuild folder structure\n    const structure = {};\n    newFiles.forEach(fileData => {\n      const parts = fileData.relativePath.split('/');\n      let current = structure;\n      for (let i = 0; i < parts.length - 1; i++) {\n        if (!current[parts[i]]) {\n          current[parts[i]] = {};\n        }\n        current = current[parts[i]];\n      }\n      current[parts[parts.length - 1]] = fileData;\n    });\n    setFolderStructure(structure);\n    \n    // Call parent callback once\n    if (onFilesChange) {\n      onFilesChange(newFiles);\n    }\n  };\n\n  // Format file size\n  const formatFileSize = (bytes) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];\n  };\n\n\n  // Get file type info based on filename or MIME type\n  const getFileTypeInfo = (file) => {\n    const filename = file.name || file.filename || '';\n    const mimeType = file.type || '';\n    const ext = filename.split('.').pop().toLowerCase();\n    \n    // Check by file extension first\n    if (['pdf'].includes(ext)) return { label: 'PDF', className: 'file-type-pdf' };\n    if (['jpg', 'jpeg', 'png', 'gif', 'webp', 'bmp'].includes(ext)) return { label: 'IMG', className: 'file-type-image' };\n    if (['zip', 'rar', '7z'].includes(ext)) return { label: 'ZIP', className: 'file-type-archive' };\n    if (['dwg', 'dxf', 'dwf'].includes(ext)) return { label: 'CAD', className: 'file-type-cad' };\n    if (['xls', 'xlsx', 'xlsm'].includes(ext)) return { label: 'XLS', className: 'file-type-excel' };\n    if (['txt', 'csv'].includes(ext)) return { label: 'TXT', className: 'file-type-text' };\n    if (['rvt', 'rfa', 'ifc'].includes(ext)) return { label: 'BIM', className: 'file-type-bim' };\n    \n    // Fall back to MIME type checking\n    if (mimeType.includes('pdf')) return { label: 'PDF', className: 'file-type-pdf' };\n    if (mimeType.includes('image')) return { label: 'IMG', className: 'file-type-image' };\n    if (mimeType.includes('zip') || mimeType.includes('rar')) return { label: 'ZIP', className: 'file-type-archive' };\n    if (mimeType.includes('sheet')) return { label: 'XLS', className: 'file-type-excel' };\n    if (mimeType.includes('text')) return { label: 'TXT', className: 'file-type-text' };\n    \n    return { label: 'FILE', className: 'file-type-default' };\n  };\n\n  // Render folder structure\n  const renderFolderStructure = () => {\n    const renderLevel = (obj, level = 0) => {\n      return Object.entries(obj).map(([key, value]) => {\n        if (value.id) {\n          // It's a file\n          const fileType = getFileTypeInfo(value);\n          return (\n            <div key={value.id} className=\"file-item compact\" style={{ paddingLeft: `${level * 20}px` }}>\n              <div className=\"file-info\">\n                <span className={`file-type-badge ${fileType.className}`}>\n                  {fileType.label}\n                </span>\n                <span className=\"file-name\">{value.filename}</span>\n                <span className=\"file-size\">{formatFileSize(value.size)}</span>\n                \n                {/* Upload status */}\n                {value.isUploading && uploadProgress[value.id] < 100 && (\n                  <div className=\"file-upload-status\">\n                    <span className=\"file-status uploading\">\n                      Uploading... {uploadProgress[value.id] ? `${Math.round(uploadProgress[value.id])}%` : '0%'}\n                    </span>\n                    <div className=\"progress-bar-container\">\n                      <div \n                        className=\"progress-bar-fill\" \n                        style={{ width: `${uploadProgress[value.id] || 0}%` }}\n                      />\n                    </div>\n                  </div>\n                )}\n                {((value.isUploading && uploadProgress[value.id] === 100) || (!value.isUploading && !value.uploadError && value.uploadComplete)) && (\n                  <span className=\"file-status uploaded\">✓ Uploaded</span>\n                )}\n                {value.uploadError && (\n                  <span className=\"file-status error\">\n                    Upload failed: {value.uploadError}\n                    <button\n                      type=\"button\"\n                      className=\"retry-button\"\n                      onClick={() => retryUpload(value.id)}\n                      disabled={disabled || retryingFiles.has(value.id)}\n                      title=\"Retry upload\"\n                    >\n                      {retryingFiles.has(value.id) ? '⟳' : '↻'} Retry\n                    </button>\n                  </span>\n                )}\n                {value.isLocal && !value.isUploading && !value.uploadComplete && (\n                  <span className=\"file-status pending\">Pending upload</span>\n                )}\n              </div>\n              \n              <div className=\"file-actions\">\n                <button\n                  type=\"button\"\n                  className={`file-remove compact ${value.isUploading ? 'uploading' : ''}`}\n                  onClick={() => handleDeleteClick(value.id)}\n                  disabled={disabled}\n                  title={value.isUploading ? \"Cancel upload\" : \"Remove file\"}\n                >\n                  ✕\n                </button>\n              </div>\n              \n            </div>\n          );\n        } else {\n          // It's a folder\n          // Get the full folder path\n          const folderPath = level === 0 ? key : `${key}`;\n          \n          // Recursively collect all files in this folder and subfolders\n          const getAllFilesInFolder = (obj) => {\n            let files = [];\n            Object.values(obj).forEach(item => {\n              if (item && item.id) {\n                // It's a file\n                files.push(item);\n              } else if (typeof item === 'object' && item !== null) {\n                // It's a subfolder, recurse\n                files = files.concat(getAllFilesInFolder(item));\n              }\n            });\n            return files;\n          };\n          \n          const filesInFolder = getAllFilesInFolder(value);\n          const allFilesUploaded = filesInFolder.every(f => f.uploadComplete === true);\n          // Check if any files are actually still uploading using the Set tracker\n          const someFilesUploading = filesInFolder.some(f => uploadingFiles.has(f.id));\n          \n\n          return (\n            <div key={key} className=\"folder-group\">\n              <div className=\"folder-header\" style={{ paddingLeft: `${level * 20}px` }}>\n                <svg \n                  className=\"folder-icon\"\n                  width=\"15\" \n                  height=\"15\" \n                  viewBox=\"0 0 16 16\" \n                  fill=\"currentColor\"\n                >\n                  <path d=\"M9.828 3h3.982a2 2 0 0 1 1.992 2.181l-.637 7A2 2 0 0 1 13.174 14H2.826a2 2 0 0 1-1.991-1.819l-.637-7a1.99 1.99 0 0 1 .342-1.31L.5 3a2 2 0 0 1 2-2h3.672a2 2 0 0 1 1.414.586l.828.828A2 2 0 0 0 9.828 3z\"/>\n                </svg>\n                <span className=\"folder-name\">{key}</span>\n                <span className=\"folder-file-count\">({filesInFolder.length} files)</span>\n                <button\n                  type=\"button\"\n                  className=\"folder-delete-btn\"\n                  onClick={() => {\n                    // Build full path by traversing up the folder structure\n                    const pathParts = [];\n                    let currentKey = key;\n                    pathParts.unshift(currentKey);\n                    // For nested folders, we'd need to track parent paths\n                    // For now, using the first file's path to determine folder path\n                    if (filesInFolder.length > 0) {\n                      const firstFile = filesInFolder[0];\n                      const fullPath = firstFile.relativePath.substring(0, firstFile.relativePath.lastIndexOf('/'));\n                      deleteFolder(fullPath);\n                    }\n                  }}\n                  disabled={disabled || someFilesUploading}\n                  title={someFilesUploading ? \"Cannot delete while uploading\" : \"Delete entire folder\"}\n                  style={{ \n                    fontSize: '16px',\n                    fontWeight: 'bold'\n                  }}\n                >\n                  ✕\n                </button>\n              </div>\n              {renderLevel(value, level + 1)}\n            </div>\n          );\n        }\n      });\n    };\n\n    return renderLevel(folderStructure);\n  };\n\n  return (\n    <div className=\"file-upload-component\">\n      {/* Drop zone */}\n      <div\n        className={`file-drop-zone ${dragActive ? 'drag-active' : ''} ${disabled ? 'disabled' : ''} ${selectedFiles.length > 0 ? 'has-files' : ''}`}\n        onDragEnter={handleDrag}\n        onDragLeave={handleDrag}\n        onDragOver={handleDrag}\n        onDrop={handleDrop}\n      >\n        {selectedFiles.length === 0 ? (\n          <>\n            <div className=\"upload-icon\">\n              <svg width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"#9ca3af\" strokeWidth=\"2\">\n                <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\" />\n                <polyline points=\"17 8 12 3 7 8\" />\n                <line x1=\"12\" y1=\"3\" x2=\"12\" y2=\"15\" />\n              </svg>\n            </div>\n            \n            <p className=\"upload-text\">\n              Drag and drop files or folders here\n            </p>\n          </>\n        ) : (\n          <div className=\"files-in-dropzone\">\n            <div className=\"dropzone-header\">\n              <h4>Selected Files ({selectedFiles.length}/{maxFiles})</h4>\n              <p className=\"upload-hint\">\n                <small>Drag more files here or use the buttons below</small>\n              </p>\n            </div>\n            <div className=\"dropzone-files-list\">\n              {Object.keys(folderStructure).length > 0 ? (\n                renderFolderStructure()\n              ) : (\n                selectedFiles.map(file => (\n                  <div key={file.id} className=\"file-item compact\">\n                    <div className=\"file-info\">\n                      <span className={`file-type-badge ${getFileTypeInfo(file).className}`}>\n                        {getFileTypeInfo(file).label}\n                      </span>\n                      <span className=\"file-name\">{file.filename}</span>\n                      <span className=\"file-size\">{formatFileSize(file.size)}</span>\n                      \n                      {/* Upload status */}\n                      {file.isUploading && uploadProgress[file.id] < 100 && (\n                        <span className=\"file-status uploading\">\n                          {Math.round(uploadProgress[file.id] || 0)}%\n                        </span>\n                      )}\n                      {((file.isUploading && uploadProgress[file.id] === 100) || (!file.isUploading && !file.uploadError && file.uploadComplete)) && (\n                        <span className=\"file-status uploaded\">✓</span>\n                      )}\n                      {file.uploadError && (\n                        <button\n                          type=\"button\"\n                          className=\"retry-button\"\n                          onClick={() => retryUpload(file.id)}\n                          disabled={disabled || retryingFiles.has(file.id)}\n                          title=\"Retry upload\"\n                        >\n                          ↻\n                        </button>\n                      )}\n                    </div>\n                    \n                    <button\n                      type=\"button\"\n                      className=\"file-remove compact\"\n                      onClick={() => handleDeleteClick(file.id)}\n                      disabled={disabled}\n                      title={file.isUploading ? \"Cancel\" : \"Remove\"}\n                    >\n                      ✕\n                    </button>\n                  </div>\n                ))\n              )}\n            </div>\n          </div>\n        )}\n        \n        {/* Hidden file input */}\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          multiple\n          accept=\".pdf,.jpg,.jpeg,.png,.gif,.webp,.bmp,.tiff,.tif,.svg,.xls,.xlsx,.xlsm,.xlsb,.dwg,.dxf,.dwf,.dwfx,.txt,.csv,.zip,.rar,.7z,.ifc,.rvt,.rfa,.rte,.step,.stp,.stl,.iges,.igs,.sat,.3dm,.3ds,.obj,.dae,.skp\"\n          onChange={handleFileSelect}\n          disabled={disabled}\n          style={{ display: 'none' }}\n        />\n        \n        {/* Hidden folder input */}\n        <input\n          ref={folderInputRef}\n          type=\"file\"\n          multiple\n          webkitdirectory=\"\"\n          directory=\"\"\n          onChange={handleFolderSelect}\n          disabled={disabled}\n          style={{ display: 'none' }}\n        />\n        \n        <div className=\"upload-buttons\">\n          <button\n            type=\"button\"\n            className=\"btn-upload\"\n            onClick={() => fileInputRef.current?.click()}\n            disabled={disabled}\n          >\n            Select Files\n          </button>\n          \n          <button\n            type=\"button\"\n            className=\"btn-upload btn-folder\"\n            onClick={() => folderInputRef.current?.click()}\n            disabled={disabled}\n          >\n            Select Folder\n          </button>\n        </div>\n      </div>\n\n      {/* Error messages */}\n      {errors.length > 0 && (\n        <div className=\"upload-errors\">\n          {errors.map((error, index) => (\n            <div key={index} className=\"error-item\">\n              ⚠️ {error}\n            </div>\n          ))}\n        </div>\n      )}\n\n      \n      {/* Delete Confirmation Dialog */}\n      {showDeleteConfirm && (\n        <div className=\"delete-confirmation-overlay\">\n          <div className=\"delete-confirmation-dialog\">\n            <h3>Confirm File Deletion</h3>\n            <p>\n              {selectedFiles.find(f => f.id === showDeleteConfirm)?.uploadComplete ? (\n                <>\n                  <strong>This file has been uploaded to our servers.</strong><br/>\n                  Are you sure you want to delete it? This will permanently remove the file from storage.\n                </>\n              ) : (\n                'Are you sure you want to remove this file? This action cannot be undone.'\n              )}\n            </p>\n            <div className=\"delete-confirmation-buttons\">\n              <button \n                type=\"button\" \n                className=\"btn-cancel\" \n                onClick={cancelDelete}\n              >\n                Cancel\n              </button>\n              <button \n                type=\"button\" \n                className=\"btn-delete\" \n                onClick={() => confirmDelete(showDeleteConfirm)}\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FileUploadWithFolders;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}